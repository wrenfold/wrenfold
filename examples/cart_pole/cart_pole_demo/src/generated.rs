//! Machine generated code.
#![cfg_attr(rustfmt, rustfmt_skip)]

#[inline]
#[allow(non_snake_case, clippy::unused_unit, clippy::collapsible_else_if, clippy::needless_late_init, unused_variables, unused_parens)]
pub fn cart_double_pole_dynamics<T1, T3, T5, >(params: &crate::CartPoleParams, x: &T1, u: f64, x_dot: &mut T3, energy: Option<&mut f64>, J_x: Option<&mut T5>) -> ()
where
  T1: wrenfold_traits::Span2D<6, 1, ValueType = f64>,
  T3: wrenfold_traits::OutputSpan2D<6, 1, ValueType = f64>,
  T5: wrenfold_traits::OutputSpan2D<6, 6, ValueType = f64>,
{
  // Operation counts:
  // add: 159
  // branch: 11
  // call: 7
  // compare: 5
  // divide: 5
  // multiply: 451
  // negate: 23
  // total: 661
  
  let v00056: f64 = x.get(2, 0);
  let v00034: f64 = x.get(1, 0);
  let v00036: f64 = params.l_1;
  let v00001: f64 = x.get(4, 0);
  let v00057: f64 = (v00056).sin();
  let v00039: f64 = (v00034).sin();
  let v00063: f64 = (v00056).cos();
  let v00035: f64 = (v00034).cos();
  let v01414: f64 = v00001 * v00036;
  let v00058: f64 = params.l_2;
  let v00002: f64 = x.get(5, 0);
  let v01803: f64 = -v00036;
  let v00000: f64 = x.get(3, 0);
  let v01780: f64 = v01414 * v01414;
  let v01421: f64 = v00002 * v00058;
  let v00189: f64 = v00035 * v00063 + v00039 * v00057;
  let v01806: f64 = -v00039;
  let v01804: f64 = -v00058;
  let v01775: f64 = (v00001 * v00039) * v01803;
  let v00019: f64 = params.g;
  let v00008: f64 = params.m_2;
  let v00007: f64 = params.m_1;
  let v00006: f64 = params.m_b;
  if let Some(energy) = energy {
    let v01577: f64 = v00000 * v00000;
    let v01798: f64 = v01577 + v01780;
    let v01434: f64 = v00036 * v00039;
    let v00173: f64 = 0.5f64;
    *energy = v00006 * v00173 * v01577 + v00007 * ((v00000 * v01775 + v00173 * v01798) + v00019 * v01434) + v00008 * ((v00000 * (v00002 * v00057) * v01804 + (v00000 * v01806 + v00189 * v01421) * v01414 + v00173 * (v01421 * v01421 + v01798)) + v00019 * (v01434 + v00057 * v00058));
  }
  let v00011: f64 = params.v_mu_b;
  let v00013: f64;
  if (1e-06f64) < (v00011) {
    v00013 = v00011;
  } else {
    v00013 = 1e-06f64;
  }
  let v00025: f64 = params.x_s;
  let v00024: f64 = x.get(0, 0);
  let v00027: f64 = v00024 + -v00025;
  let v00029: bool = ((0i64) as f64) < (v00027);
  let v00030: f64;
  if v00029 {
    v00030 = v00027;
  } else {
    v00030 = (0i64) as f64;
  }
  let v01800: f64 = -(v00024 + v00025);
  let v00080: bool = ((0i64) as f64) < (v01800);
  let v00081: f64;
  if v00080 {
    v00081 = v01800;
  } else {
    v00081 = (0i64) as f64;
  }
  let v00041: f64 = v00000 + v01775;
  let v01533: f64 = v00035 * v00035;
  let v00043: f64 = v01533 * v01780 + v00041 * v00041;
  let v00051: f64 = (v00043).sqrt();
  let v00045: f64 = 1.5f64;
  let v01412: f64 = v00036 * (2i64) as f64;
  let v00932: f64 = v00041 * v01806 + v01414 * v01533;
  let v01494: f64 = v00045 * v00051;
  let v01470: f64 = v00041 * (2i64) as f64;
  let v01716: f64 = v00932 * v01412;
  let v00044: bool = ((0i64) as f64) < (v00043);
  let v00053: f64;
  let v00121: f64;
  if v00044 {
    v00053 = v01470 * v01494;
    v00121 = v01494 * v01716;
  } else {
    v00053 = (0i64) as f64;
    v00121 = (0i64) as f64;
  }
  let v00547: f64 = v00039 * v01414;
  let v00551: f64 = v00000 + -(v00547 + v00057 * v01421);
  let v00065: f64 = v00035 * v01414 + v00063 * v01421;
  let v01687: f64 = v00551 * v00551;
  let v01809: f64 = -v00057;
  let v00067: f64 = v00065 * v00065 + v01687;
  let v00071: f64 = (v00067).sqrt();
  let v00970: f64 = v00551 * v01806 + v00035 * v00065;
  let v01418: f64 = (2i64) as f64 * v00058;
  let v00987: f64 = v00551 * v01809 + v00063 * v00065;
  let v01435: f64 = v00045 * v00071;
  let v01717: f64 = v00970 * v01412;
  let v01718: f64 = v00987 * v01418;
  let v00068: bool = ((0i64) as f64) < (v00067);
  let v00073: f64;
  let v00131: f64;
  let v00143: f64;
  if v00068 {
    v00073 = v01435 * ((2i64) as f64 * v00551);
    v00131 = v01435 * v01717;
    v00143 = v01435 * v01718;
  } else {
    v00073 = (0i64) as f64;
    v00131 = (0i64) as f64;
    v00143 = (0i64) as f64;
  }
  let v01797: f64 = v00007 + v00008;
  let v01816: f64 = -v01797;
  let v01406: f64 = v00008 * v00058;
  let v01535: f64 = v00035 * v00057;
  let v00738: f64 = v00035 * v01809 + v00039 * v00063;
  let v00009: f64 = v00006 + v01797;
  let v01730: f64 = v00035 * v01816;
  let v01699: f64 = v01406 * (v00002 * v00002);
  let v00664: f64 = v00063 * v01806 + v01535;
  let v00016: f64 = (1i64) as f64 / v00013;
  let v01582: f64 = v00001 * v00738;
  let v01810: f64 = -v00019;
  let v01805: f64 = -v00008;
  let v01554: f64 = (2i64) as f64 * v00189;
  let v01782: f64 = v01806 * v01806;
  let v01487: f64 = v00009 * v00189;
  let v01430: f64 = v00008 * v00189;
  let v01497: f64 = v00057 * v01797;
  let v01437: f64 = v00008 * v00057;
  let v01407: f64 = v00036 * v00058;
  let v01416: f64 = -0.16666666666666666f64 * params.c_d;
  let v01442: f64 = v00001 * v00001;
  let v01411: f64 = v00036 * v01797;
  let v00031: f64 = params.k_s;
  let v01787: f64 = (v00009 * params.mu_b) * v01810;
  let v00018: f64 = (v00000 * v00016).tanh();
  let v01561: f64 = v00057 * v00057;
  let v01815: f64 = -v01407;
  let v01000: f64 = v01497 * v01806 + v01487;
  let v01200: f64 = v00057 + v00189 * v01806;
  let v00003: f64 = u;
  let v00966: f64 = v01797 * v01806 + v00057 * v01430;
  let v01818: f64 = -v01000;
  let v00984: f64 = (v00121 + v00131) * v01416 + v00036 * (v00664 * v01699 + v00019 * v01730);
  let v01695: f64 = v01200 * v01411;
  let v00567: f64 = v00003 + v00018 * v01787 + v00063 * v01699 + v00031 * (v00081 + -v00030) + (v00053 + v00073) * v01416 + v00035 * v01411 * v01442;
  let v01203: f64 = v00009 + v01782 * v01816;
  let v00618: f64 = v00143 * v01416 + (v00063 * v01810 + v01414 * v01582) * v01406;
  let v01436: f64 = v00058 * v00966;
  let v01215: f64 = (v01437 * v01497 + v01430 * v01487 + (v01797 * v01797) * v01782) * v01815 + (v00009 + v00057 * v01554 * v01805 * v01806) * v01407 * v01797;
  let v01463: f64 = v00058 * (v00009 + v01561 * v01805);
  let v01197: f64 = (v00189 * v00189) * v01805 + v01797;
  let v01696: f64 = v00036 * v01406;
  let v01700: f64 = v01411 * (v00036 * v01203);
  let v01694: f64 = v01406 * v01803;
  let v01724: f64 = v01406 * v01463;
  let v01705: f64 = v00966 * v01804;
  let v01719: f64 = v01197 * v01407;
  let v00106: f64 = (1i64) as f64 / (v01406 * (v00036 * v01215));
  let v01230: f64 = v00618 * v01700 + (v00567 * v01695 + v00984 * v01818) * v01696;
  let v01006: f64 = v00984 * v01724 + (v00567 * v01436 + v00618 * v01000) * v01694;
  let v01224: f64 = v00567 * v01719 + v00984 * v01705 + v00618 * v01695;
  let v01454: f64 = v00036 * v00106;
  if let Some(J_x) = J_x {
    let v00202: i64;
    if v00029 {
      v00202 = 1i64;
    } else {
      v00202 = 0i64;
    }
    let v00205: i64;
    if v00080 {
      v00205 = -1i64;
    } else {
      v00205 = 0i64;
    }
    let v00239: f64 = 0.75f64;
    let v01420: f64 = (2i64) as f64 * v00239;
    let v01306: f64 = v01533 + v00039 * v00039;
    let v01443: f64 = v00001 * v00035;
    let v00254: f64;
    let v00285: f64;
    let v00384: f64;
    let v00398: f64;
    let v00433: f64;
    if v00044 {
      let v00246: f64 = (1i64) as f64 / v00051;
      let v01475: f64 = v00239 * v00246;
      let v01728: f64 = v01420 * v01470;
      let v01024: f64 = v00041 + v00547;
      let v01656: f64 = v00051 * (3i64) as f64;
      v00254 = v01024 * (v00001 * v01475 * v01716 + v01494) * (v00035 * (2i64) as f64) * v01803;
      v00285 = (v00246 * v01024 * v01728 + v01656) * v01443 * v01803;
      v00384 = (v00041 * v00246) * v01728 + v01656;
      v00398 = v00036 * (v01656 * v01806 + (v00246 * v00932) * v01728);
      v00433 = (v01716 * (v00932 * v01475) + v00051 * v01306 * (v00036 * v00045)) * v01412;
    } else {
      v00254 = (0i64) as f64;
      v00285 = (0i64) as f64;
      v00384 = (0i64) as f64;
      v00398 = (0i64) as f64;
      v00433 = (0i64) as f64;
    }
    let v01485: f64 = v00002 * (2i64) as f64;
    let v00268: f64;
    let v00291: f64;
    let v00302: f64;
    let v00337: f64;
    let v00352: f64;
    let v00366: f64;
    let v00375: f64;
    let v00390: f64;
    let v00404: f64;
    let v00418: f64;
    let v00439: f64;
    let v00459: f64;
    if v00068 {
      let v00260: f64 = (1i64) as f64 / v00071;
      let v01701: f64 = v01420 * ((2i64) as f64 * v00260);
      let v01039: f64 = v00035 * v00551 + v00039 * v00065;
      let v01089: f64 = v00063 * v00551 + v00057 * v00065;
      let v01480: f64 = v00260 * v00970;
      let v01428: f64 = v00239 * v00260;
      let v01788: f64 = v00551 * v01701;
      let v01474: f64 = v00071 * (3i64) as f64;
      v00268 = (v00001 * v01428 * v01717 + v01435) * ((2i64) as f64 * v01039) * v01803;
      v00291 = v00001 * (v00035 * v01474 + v01039 * v01788) * v01803;
      v00302 = (v01420 * (v00260 * v00987) * -v01039 + v00664 * v01435) * v01407 * (v00001 * (2i64) as f64);
      v00337 = ((v01420 * v01480) * -v01089 + v00738 * v01435) * v01407 * v01485;
      v00352 = (v00002 * v01428 * v01718 + v01435) * ((2i64) as f64 * v01089) * v01804;
      v00366 = v00002 * (v00063 * v01474 + v01089 * v01788) * v01804;
      v00375 = v00058 * (v01474 * v01809 + v00987 * v01788);
      v00390 = v01687 * v01701 + v01474;
      v00404 = v00036 * (v01474 * v01806 + v00970 * v01788);
      v00418 = (2i64) as f64 * (v01480 * (v00987 * v01420) + v00189 * v01435) * v01407;
      v00439 = (v01717 * (v00970 * v01428) + v01435 * (v00036 * v01306)) * v01412;
      v00459 = (v01718 * (v00987 * v01428) + v00058 * (v00063 * v00063 + v01561) * v01435) * v01418;
    } else {
      v00268 = (0i64) as f64;
      v00291 = (0i64) as f64;
      v00302 = (0i64) as f64;
      v00337 = (0i64) as f64;
      v00352 = (0i64) as f64;
      v00366 = (0i64) as f64;
      v00375 = (0i64) as f64;
      v00390 = (0i64) as f64;
      v00404 = (0i64) as f64;
      v00418 = (0i64) as f64;
      v00439 = (0i64) as f64;
      v00459 = (0i64) as f64;
    }
    let v01429: f64 = v00039 * v01797;
    let v00368: f64 = v01699 * v01809 + v00366 * v01416;
    let v01082: f64 = v00057 * v00738 + v00063 * v00189;
    let v01707: f64 = v01429 * v01803;
    let v01057: f64 = (v00254 + v00268) * v01416 + v00036 * (v00019 * v01429 + v01699 * -v00189);
    let v01133: f64 = v01535 * v01816 + v00009 * v00664;
    let v01408: f64 = v00008 * v00036;
    let v01237: f64 = v00035 * v00189 + v00039 * v00664;
    let v01709: f64 = v00063 * v01406;
    let v00712: f64 = v01442 * v01707 + (v00285 + v00291) * v01416;
    let v01021: f64 = v00664 * v01437 + v01730;
    let v01763: f64 = v01406 * v01412;
    let v00792: f64 = v00398 + v00404;
    let v00419: f64 = v00418 * v01416;
    let v01272: f64 = v00063 + v00738 * v01806;
    let v00765: f64 = v00337 * v01416 + (v00036 * v00189) * v01699;
    let v01146: f64 = (v00063 * v01797) * v01806 + v00009 * v00738;
    let v01756: f64 = v01237 * v01803;
    let v01107: f64 = v00352 * v01416 + (v00019 * v00057 + v00189 * (v01442 * v01803)) * v01406;
    let v00721: f64 = v00302 * v01416 + v01406 * v01414 * (v00001 * v00189);
    let v01793: f64 = v01554 * (v00567 * v01408);
    let v00467: f64 = v01485 * v01709 + v00375 * v01416;
    let v00828: f64 = v00419 + (v00002 * v00664) * v01763;
    let v00816: f64 = v00792 * v01416 + (2i64) as f64 * v01411 * v01443;
    let v01715: f64 = (v00433 + v00439) * v01416;
    let v00228: f64 = (1i64) as f64 / (v01215 * v01215 * (v00036 * v00036) * (v01406 * v01406));
    let v01710: f64 = v00459 * v01416;
    let v00807: f64 = v00419 + v01582 * v01763;
    let v01446: f64 = v00036 * v01197;
    let v00791: f64 = v00016 * ((1i64) as f64 + v00018 * -v00018) * v01787 + (v00384 + v00390) * v01416;
    let v01279: f64 = (v00063 * v01497 + v00738 * v01487) * v01696 + v01082 * v01429 * v01694;
    let v01246: f64 = (v00035 * v01707 + v00057 * v01237 * v01408) * v01816 + v01487 * (v00664 * v01408);
    let v01697: f64 = v01406 * v01407;
    let v01706: f64 = v01407 * v01446;
    let v01708: f64 = v01411 * (v00036 * v01200);
    let v01808: f64 = -(2i64) as f64;
    let v01817: f64 = -v00966;
    let v01789: f64 = v00791 * v01697;
    let v01794: f64 = (v00228 * v01279) * v01694;
    let v01755: f64 = v01230 * v01808;
    let v01796: f64 = v01697 * (v01246 * -v00228);
    let v00658: f64 = (v00205) as f64 + -(v00202) as f64;
    let v01750: f64 = v01006 * v01808;
    let v01529: f64 = v00031 * v00106;
    let v01732: f64 = v00106 * v01406;
    let v01790: f64 = v01224 * v01694;
    let v01713: f64 = v00658 * v01529;
    let v01723: f64 = v01406 * v01454;
    J_x.set(0, 0, (0i64) as f64);
    J_x.set(0, 1, (0i64) as f64);
    J_x.set(0, 2, (0i64) as f64);
    J_x.set(0, 3, (1i64) as f64);
    J_x.set(0, 4, (0i64) as f64);
    J_x.set(0, 5, (0i64) as f64);
    J_x.set(1, 0, (0i64) as f64);
    J_x.set(1, 1, (0i64) as f64);
    J_x.set(1, 2, (0i64) as f64);
    J_x.set(1, 3, (0i64) as f64);
    J_x.set(1, 4, (1i64) as f64);
    J_x.set(1, 5, (0i64) as f64);
    J_x.set(2, 0, (0i64) as f64);
    J_x.set(2, 1, (0i64) as f64);
    J_x.set(2, 2, (0i64) as f64);
    J_x.set(2, 3, (0i64) as f64);
    J_x.set(2, 4, (0i64) as f64);
    J_x.set(2, 5, (1i64) as f64);
    J_x.set(3, 0, v01713 * (v01446 * v01697));
    J_x.set(3, 1, (v00228 * v01246) * v01697 * v01790 * v01808 + ((v00618 * v01411) * v01756 + v00712 * v01706 + v00721 * v01708 + (v00664 * v01793 + v00984 * v01021 + v00966 * v01057) * v01815) * v01732);
    J_x.set(3, 2, v01279 * ((2i64) as f64 * v00228) * v01694 * v01790 + (v01107 * v01708 + (v00036 * v00618) * (v01272 * v01411) + v00368 * v01706 + (v00738 * v01793 + v01082 * (v00008 * v00984) + v00765 * v00966) * v01815) * v01732);
    J_x.set(3, 3, v00106 * (v01446 * v01789 + (v00375 * v01695 + v00792 * v01705) * v01416 * v01696));
    J_x.set(3, 4, (v00807 * v01695 + v01705 * v01715 + v00816 * v01719) * v01723);
    J_x.set(3, 5, (v01695 * v01710 + v00828 * v01705 + v00467 * v01719) * v01723);
    J_x.set(4, 0, v01713 * (v01697 * v01817));
    J_x.set(4, 1, v01750 * v01796 + v00106 * ((v00618 * v01133 + v00721 * v01000) * v01694 + (v01057 * v01463 + (v00567 * v01021 + v00712 * v00966) * v01815) * v01406));
    J_x.set(4, 2, v00106 * ((v00618 * v01146 + v01000 * v01107) * v01694 + (v00765 * v01463 + -(v00984 * ((2i64) as f64 * v00057) * v01709 + (v01082 * (v00008 * v00567) + v00368 * v00966) * v01407)) * v01406) + v01750 * v01794);
    J_x.set(4, 3, v00106 * (v01789 * v01817 + (v00375 * v01000 * v01803 + v00792 * v01463) * (v01406 * v01416)));
    J_x.set(4, 4, v00106 * (v01715 * v01724 + (v00807 * v01000 + v00816 * v01436) * v01694));
    J_x.set(4, 5, v00106 * (v00828 * v01724 + (v01000 * v01710 + v00467 * v01436) * v01694));
    J_x.set(5, 0, v01529 * v01708 * (v00658 * v01406));
    J_x.set(5, 1, v01755 * v01796 + v00106 * (v00721 * v01700 + ((v00567 * v01797) * v01756 + v00712 * v01695) * v01696 + -((2i64) as f64 * (v00035 * v01797) * v01707 * (v00618 * v01803) + (v00984 * v01133 + v01000 * v01057) * v01696)));
    J_x.set(5, 2, v01755 * v01794 + v00106 * (v01107 * v01700 + (v00984 * v01146 + v00765 * v01000) * v01694 + (v01272 * (v00567 * v01411) + v00368 * v01695) * v01696));
    J_x.set(5, 3, v00106 * (v01708 * (v00791 * v01406) + (v01203 * (v00375 * v01411) + v00792 * v01406 * v01818) * (v00036 * v01416)));
    J_x.set(5, 4, v00106 * (v00807 * v01700 + (v01715 * v01818 + v00816 * v01695) * v01696));
    J_x.set(5, 5, v00106 * (v01700 * v01710 + (v00828 * v01818 + v00467 * v01695) * v01696));
  }
  x_dot.set(0, 0, v00000);
  x_dot.set(1, 0, v00001);
  x_dot.set(2, 0, v00002);
  x_dot.set(3, 0, v01454 * (v01224 * v01406));
  x_dot.set(4, 0, v00106 * v01006);
  x_dot.set(5, 0, v00106 * v01230);
}
