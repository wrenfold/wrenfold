//! Machine generated code.
#![cfg_attr(rustfmt, rustfmt_skip)]

#[inline]
#[allow(non_snake_case, clippy::unused_unit, clippy::collapsible_else_if, clippy::needless_late_init, unused_variables, unused_parens)]
pub fn cart_double_pole_dynamics<T1, T2, T4, >(params: &crate::CartPoleParams, x: &T1, x_dot: &mut T2, energy: Option<&mut f64>, J_x: Option<&mut T4>) -> ()
where
  T1: wrenfold_traits::Span2D<6, 1, ValueType = f64>,
  T2: wrenfold_traits::OutputSpan2D<6, 1, ValueType = f64>,
  T4: wrenfold_traits::OutputSpan2D<6, 6, ValueType = f64>,
{
  // Operation counts:
  // add: 87
  // branch: 2
  // call: 4
  // divide: 2
  // multiply: 283
  // negate: 16
  // total: 394
  
  let v00017: f64 = x.get(2, 0);
  let v00004: f64 = x.get(1, 0);
  let v00020: f64 = (v00017).sin();
  let v00005: f64 = (v00004).sin();
  let v00018: f64 = (v00017).cos();
  let v00016: f64 = (v00004).cos();
  let v00014: f64 = params.l_2;
  let v00002: f64 = x.get(5, 0);
  let v00008: f64 = params.l_1;
  let v00001: f64 = x.get(4, 0);
  let v00901: f64 = v00002 * v00014;
  let v00096: f64 = v00016 * v00018 + v00005 * v00020;
  let v01135: f64 = -v00005;
  let v00000: f64 = x.get(3, 0);
  let v00895: f64 = v00001 * v00008;
  let v00026: f64 = params.g;
  let v00011: f64 = params.m_2;
  let v00007: f64 = params.m_1;
  let v00038: f64 = params.m_b;
  if let Some(energy) = energy {
    let v00084: f64 = 0.5f64;
    let v00323: f64 = v00000 * v01135;
    let v00324: f64 = v00084 * v00895;
    let v00919: f64 = v00005 * v00008;
    let v01088: f64 = v00084 * (v00000 * v00000);
    *energy = v00038 * v01088 + v00007 * (((v00323 + v00324) * v00895 + v01088) + v00026 * v00919) + v00011 * (((v00324 + (v00323 + v00096 * v00901)) * v00895 + (v00000 * -v00020 + v00084 * v00901) * v00901 + v01088) + v00026 * (v00919 + v00014 * v00020));
  }
  let v01134: f64 = -v00011;
  let v01131: f64 = v00007 + v00011;
  let v00039: f64 = v00038 + v01131;
  let v01143: f64 = -v01131;
  let v00533: f64 = v01131 * v01135;
  let v00914: f64 = v00002 * v00002;
  let v00887: f64 = v00011 * v00014;
  let v01000: f64 = v00016 * v00020;
  let v00564: f64 = v00039 + v00020 * v00020 * v01134;
  let v01080: f64 = v01135 * v01143;
  let v00958: f64 = v00039 * v00096;
  let v00907: f64 = v00001 * v00001;
  let v00892: f64 = v00008 * v01131;
  let v00400: f64 = v00020 * -v00016 + v00005 * v00018;
  let v01066: f64 = v00016 * v01143;
  let v01061: f64 = v00887 * v00914;
  let v00351: f64 = v00018 * v01135 + v01000;
  let v01063: f64 = v00892 * v00907;
  let v00728: f64 = v00020 + v00096 * v01135;
  let v01132: f64 = -v00008;
  let v00535: f64 = v00533 + v00020 * (v00011 * v00096);
  let v00888: f64 = v00008 * v00014;
  let v00739: f64 = v00096 * v00958 * v01134 + (v00533 + (v00011 * (2i64) as f64) * (v00020 * v00096)) * v01080 + v00564 * v01131;
  let v00889: f64 = v00008 * v00011;
  let v00575: f64 = v00026 * -v00018 + v00001 * v00400 * v00895;
  let v00543: f64 = v00351 * v01061 + v00026 * v01066;
  let v01055: f64 = v00887 * v00888;
  let v00734: f64 = v00039 + v01080 * v01135;
  let v00585: f64 = (v00020 * v01131) * v01135 + v00958;
  let v00299: f64 = v00018 * v01061 + v00016 * v01063;
  let v01144: f64 = -v00535;
  let v01058: f64 = v00728 * v00892;
  let v01068: f64 = v00734 * v00892;
  let v01067: f64 = v00585 * v01132;
  let v01059: f64 = ((v00096 * v00096) * v01134 + v01131) * v00888;
  let v00922: f64 = v00008 * v00299;
  let v00046: f64 = (1i64) as f64 / ((v00008 * v00739) * v01055);
  let v00908: f64 = v00008 * v00046;
  let v00760: f64 = v00299 * v01144 + v00575 * v00585 * v01134 + v00543 * v00564;
  let v00755: f64 = v00543 * v01067 + v00575 * v01068 + v00299 * v01058;
  let v00750: f64 = (v00543 * (v00535 * v01132) + v00575 * v00889 * (v00728 * v01131)) * v00888 + v00922 * v01059;
  let v01057: f64 = v00046 * v00887;
  if let Some(J_x) = J_x {
    let v01083: f64 = v00005 * v01132;
    let v00645: f64 = v00020 * v00400 + v00018 * v00096;
    let v01099: f64 = v00739 * v00888;
    let v01054: f64 = v00887 * v00887;
    let v00894: f64 = v00008 * v00008;
    let v00764: f64 = v00016 * v00096 + v00005 * v00351;
    let v00905: f64 = v00005 * v01131;
    let v01041: f64 = v00039 * v00400;
    let v00909: f64 = v00008 * v00096;
    let v01102: f64 = v00764 * v00889;
    let v01079: f64 = v00907 * v01132;
    let v00129: f64 = (1i64) as f64 / (v00894 * v01054 * v01099 * v01099);
    let v01093: f64 = v00535 * -v00014;
    let v00617: f64 = v00026 * v00905 + v01061 * -v00096;
    let v00923: f64 = v00008 * v00543;
    let v00609: f64 = v00351 * (v00011 * v00020) + v01066;
    let v00668: f64 = v01000 * v01143 + v00039 * v00351;
    let v00801: f64 = v00909 * v01041 + (v00018 * (v00008 * v00020) + v00645 * v01083) * v01131;
    let v00679: f64 = (v00018 * v01131) * v01135 + v01041;
    let v00902: f64 = v00008 * (2i64) as f64;
    let v00789: f64 = v00018 + v00400 * v01135;
    let v00649: f64 = v00020 * v00026 + v00096 * v01079;
    let v01124: f64 = v01054 * (v00888 * v01132);
    let v01110: f64 = v00801 * ((2i64) as f64 * v00129);
    let v01136: f64 = -(2i64) as f64;
    let v01142: f64 = -v00888;
    let v01056: f64 = v00887 * v01132;
    let v01086: f64 = v00008 * v00887;
    let v00773: f64 = (v00016 * (v00905 * v01132) + v00020 * v01102) * v01143 + v00351 * v00889 * v00958;
    let v01073: f64 = v00887 * v00892;
    let v00931: f64 = (2i64) as f64 * v00046;
    let v00912: f64 = v00016 * v01131;
    let v01123: f64 = v01054 * v01056;
    let v01130: f64 = (v00773 * -v00129) * (v01054 * (v00888 * v01136));
    let v01122: f64 = v01054 * (v00902 * (v00002 * v00046));
    let v01128: f64 = (v00001 * v00887) * (v00894 * v00931);
    J_x.set(0, 0, (0i64) as f64);
    J_x.set(0, 1, (0i64) as f64);
    J_x.set(0, 2, (0i64) as f64);
    J_x.set(0, 3, (1i64) as f64);
    J_x.set(0, 4, (0i64) as f64);
    J_x.set(0, 5, (0i64) as f64);
    J_x.set(1, 0, (0i64) as f64);
    J_x.set(1, 1, (0i64) as f64);
    J_x.set(1, 2, (0i64) as f64);
    J_x.set(1, 3, (0i64) as f64);
    J_x.set(1, 4, (1i64) as f64);
    J_x.set(1, 5, (0i64) as f64);
    J_x.set(2, 0, (0i64) as f64);
    J_x.set(2, 1, (0i64) as f64);
    J_x.set(2, 2, (0i64) as f64);
    J_x.set(2, 3, (0i64) as f64);
    J_x.set(2, 4, (0i64) as f64);
    J_x.set(2, 5, (1i64) as f64);
    J_x.set(3, 0, (0i64) as f64);
    J_x.set(3, 1, v00750 * v01130 + (((v00609 * v00923 + v00617 * (v00008 * v00535) + (v00575 * v01131) * v01102) * v01142 + (((2i64) as f64 * v00299) * (v00351 * v01132) + v00892 * v00895 * (v00001 * v00728)) * v00887 * v00909) + v01059 * v01063 * v01083) * v01057);
    J_x.set(3, 2, (v00129 * v00801) * (v00750 * v01136) * v01123 + (v00649 * (v00008 * v00728) * v01073 + v00789 * (v00008 * v00575) * v01073 + (v00020 * v00914 * v01059 + v00299 * v00902 * (v00096 * v00400) + v00645 * v00923 + v00096 * v00888 * (v00535 * v00914)) * v01056) * v01057);
    J_x.set(3, 3, (0i64) as f64);
    J_x.set(3, 4, (v00400 * v00887 * v01058 + v00912 * v01059) * v01128);
    J_x.set(3, 5, (v00018 * v01059 + v00351 * v00888 * v01144) * v01122);
    J_x.set(4, 0, (0i64) as f64);
    J_x.set(4, 1, (v00760 * v00888) * v01130 + (v00564 * v00617 * v00888 + (v00299 * v00609 + v00668 * (v00011 * v00575) + v00535 * v00905 * v01079 + v00889 * v00907 * (v00096 * v00585)) * v01142) * v01057);
    J_x.set(4, 2, ((v00679 * -v00575 + v00645 * -v00299 + v00564 * v00901 * (v00002 * v00096)) * v01086 + v00585 * v00649 * v01056) * v01057 + -((v00020 * (v00018 * (2i64) as f64 * v00543 + v00914 * v01093) * (v00887 * v00908) + v00760 * v01110 * v01124) * v00887));
    J_x.set(4, 3, (0i64) as f64);
    J_x.set(4, 4, (v00400 * (v00011 * v00585) + v00535 * v00912) * v01055 * (v00001 * v00931) * v01132);
    J_x.set(4, 5, (v00018 * v01093 + v00564 * (v00014 * v00351)) * v01122);
    J_x.set(5, 0, (0i64) as f64);
    J_x.set(5, 1, v00755 * (v00129 * v00773) * v01124 * v01136 + v00046 * ((v00668 * v00923 + v00617 * (v00008 * v00585) + v00005 * v01058 * v01063) * v01056 + (v00008 * ((2i64) as f64 * v00575 * v01066 * v01080 + v00096 * v00734 * v01063) + v00764 * (v00299 * v01131) * v01132) * v01086));
    J_x.set(5, 2, (v00755 * v01132) * v01110 * v01123 + (v00679 * v00923 * v01132 + (v00008 * v00734) * (v00649 * v00892) + v00922 * (v00789 * v00892) + (v00020 * v01058 + v00585 * v00909) * v00914 * v01056) * v01057);
    J_x.set(5, 3, (0i64) as f64);
    J_x.set(5, 4, (v00400 * v01068 + v00912 * v01058) * v01128);
    J_x.set(5, 5, (v00018 * v01058 + v00351 * v01067) * v01122);
  }
  x_dot.set(0, 0, v00000);
  x_dot.set(1, 0, v00001);
  x_dot.set(2, 0, v00002);
  x_dot.set(3, 0, v00750 * v01057);
  x_dot.set(4, 0, v00046 * v00760 * v01055);
  x_dot.set(5, 0, v00908 * (v00755 * v00887));
}
