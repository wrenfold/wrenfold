//! Machine generated code.
#![cfg_attr(rustfmt, rustfmt_skip)]

#[inline]
#[allow(non_snake_case, clippy::unused_unit, clippy::collapsible_else_if, clippy::needless_late_init, unused_variables, unused_parens)]
pub fn cart_double_pole_dynamics<T1, T3, T5, >(params: &crate::CartPoleParams, x: &T1, u: f64, x_dot: &mut T3, energy: Option<&mut f64>, J_x: Option<&mut T5>) -> ()
where
  T1: wrenfold_traits::Span2D<6, 1, ValueType = f64>,
  T3: wrenfold_traits::OutputSpan2D<6, 1, ValueType = f64>,
  T5: wrenfold_traits::OutputSpan2D<6, 6, ValueType = f64>,
{
  // Operation counts:
  // add: 159
  // branch: 11
  // call: 7
  // compare: 5
  // divide: 5
  // multiply: 444
  // negate: 23
  // total: 654
  
  let v00055: f64 = x.get(2, 0);
  let v00034: f64 = x.get(1, 0);
  let v00056: f64 = (v00055).sin();
  let v00038: f64 = (v00034).sin();
  let v00062: f64 = (v00055).cos();
  let v00035: f64 = (v00034).cos();
  let v00057: f64 = params.l_2;
  let v00002: f64 = x.get(5, 0);
  let v00036: f64 = params.l_1;
  let v00001: f64 = x.get(4, 0);
  let v01402: f64 = v00002 * v00057;
  let v00176: f64 = v00035 * v00062 + v00038 * v00056;
  let v01774: f64 = -v00038;
  let v00000: f64 = x.get(3, 0);
  let v01778: f64 = -v00056;
  let v01397: f64 = v00001 * v00036;
  let v00019: f64 = params.g;
  let v00008: f64 = params.m_2;
  let v00007: f64 = params.m_1;
  let v00006: f64 = params.m_b;
  if let Some(energy) = energy {
    let v00164: f64 = 0.5f64;
    let v00618: f64 = v00000 * v01774;
    let v00619: f64 = v00164 * v01397;
    let v01422: f64 = v00036 * v00038;
    let v01705: f64 = v00164 * (v00000 * v00000);
    *energy = v00006 * v01705 + v00007 * (((v00618 + v00619) * v01397 + v01705) + v00019 * v01422) + v00008 * (((v00619 + (v00618 + v00176 * v01402)) * v01397 + (v00000 * v01778 + v00164 * v01402) * v01402 + v01705) + v00019 * (v01422 + v00056 * v00057));
  }
  let v00011: f64 = params.v_mu_b;
  let v00013: f64;
  if (1e-06f64) < (v00011) {
    v00013 = v00011;
  } else {
    v00013 = 1e-06f64;
  }
  let v00025: f64 = params.x_s;
  let v00024: f64 = x.get(0, 0);
  let v00027: f64 = v00024 + -v00025;
  let v00029: bool = ((0i64) as f64) < (v00027);
  let v00030: f64;
  if v00029 {
    v00030 = v00027;
  } else {
    v00030 = (0i64) as f64;
  }
  let v01768: f64 = -(v00024 + v00025);
  let v00079: bool = ((0i64) as f64) < (v01768);
  let v00080: f64;
  if v00079 {
    v00080 = v01768;
  } else {
    v00080 = (0i64) as f64;
  }
  let v01771: f64 = -v00036;
  let v00040: f64 = v00000 + (v00001 * v00038) * v01771;
  let v01425: f64 = v00001 * v00035;
  let v01394: f64 = v00036 * v00036;
  let v01506: f64 = v00035 * v00035;
  let v00042: f64 = v01394 * v01425 * v01425 + v00040 * v00040;
  let v00050: f64 = (v00042).sqrt();
  let v00044: f64 = 1.5f64;
  let v01396: f64 = v00036 * (2i64) as f64;
  let v00950: f64 = v00040 * v01774 + v01397 * v01506;
  let v01474: f64 = v00044 * v00050;
  let v01454: f64 = v00040 * (2i64) as f64;
  let v00043: bool = ((0i64) as f64) < (v00042);
  let v00052: f64;
  let v00114: f64;
  if v00043 {
    v00052 = v01454 * v01474;
    v00114 = v01474 * (v00950 * v01396);
  } else {
    v00052 = (0i64) as f64;
    v00114 = (0i64) as f64;
  }
  let v00520: f64 = v00038 * v01397;
  let v00524: f64 = v00000 + -(v00520 + v00056 * v01402);
  let v00064: f64 = v00035 * v01397 + v00062 * v01402;
  let v01657: f64 = v00524 * v00524;
  let v00066: f64 = v00064 * v00064 + v01657;
  let v00070: f64 = (v00066).sqrt();
  let v00958: f64 = v00524 * v01774 + v00035 * v00064;
  let v01418: f64 = v00044 * v00070;
  let v01401: f64 = (2i64) as f64 * v00057;
  let v00975: f64 = v00524 * v01778 + v00062 * v00064;
  let v00067: bool = ((0i64) as f64) < (v00066);
  let v00072: f64;
  let v00124: f64;
  let v00136: f64;
  if v00067 {
    v00072 = v01418 * ((2i64) as f64 * v00524);
    v00124 = v01418 * (v00958 * v01396);
    v00136 = v00975 * v01401 * v01418;
  } else {
    v00072 = (0i64) as f64;
    v00124 = (0i64) as f64;
    v00136 = (0i64) as f64;
  }
  let v01766: f64 = v00007 + v00008;
  let v01785: f64 = -v01766;
  let v01388: f64 = v00008 * v00057;
  let v01704: f64 = v00062 * v01774;
  let v01508: f64 = v00035 * v00056;
  let v01700: f64 = v00035 * v01785;
  let v01670: f64 = v01388 * (v00002 * v00002);
  let v00649: f64 = v01508 + v01704;
  let v00009: f64 = v00006 + v01766;
  let v00016: f64 = (1i64) as f64 / v00013;
  let v00722: f64 = v00056 * -v00035 + v00038 * v00062;
  let v01773: f64 = -v00008;
  let v01632: f64 = v00056 * v00056;
  let v01404: f64 = v00008 * (2i64) as f64;
  let v01393: f64 = v00036 * v01766;
  let v01779: f64 = -v00019;
  let v01555: f64 = v00001 * v00722;
  let v01711: f64 = v01766 * v01774;
  let v01468: f64 = v00009 * v00176;
  let v01395: f64 = -0.16666666666666666f64 * params.c_d;
  let v01752: f64 = v01393 * v01425;
  let v00031: f64 = params.k_s;
  let v01758: f64 = (v00009 * params.mu_b) * v01779;
  let v00018: f64 = (v00000 * v00016).tanh();
  let v00937: f64 = v00009 + v01632 * v01773;
  let v01754: f64 = v01774 * v01785;
  let v00988: f64 = (v00056 * v01766) * v01774 + v01468;
  let v01196: f64 = v00056 + v00176 * v01774;
  let v00003: f64 = u;
  let v00946: f64 = v00056 * (v00008 * v00176) + v01711;
  let v01786: f64 = -v00988;
  let v00972: f64 = (v00114 + v00124) * v01395 + v00036 * (v00649 * v01670 + v00019 * v01700);
  let v01663: f64 = v01196 * v01393;
  let v00540: f64 = v00003 + v00018 * v01758 + v00062 * v01670 + v00031 * (v00080 + -v00030) + (v00052 + v00072) * v01395 + v00001 * v01752;
  let v01674: f64 = v00946 * v01771;
  let v01389: f64 = v00036 * v00057;
  let v01204: f64 = v00176 * v01468 * v01773 + (v01404 * (v00056 * v00176) + v01711) * v01754 + v00937 * v01766;
  let v01772: f64 = -v00057;
  let v01193: f64 = (v00176 * v00176) * v01773 + v01766;
  let v01199: f64 = v00009 + v01754 * v01774;
  let v00594: f64 = v00136 * v01395 + (v00062 * v01779 + v01397 * v01555) * v01388;
  let v01664: f64 = v01388 * v01389;
  let v01675: f64 = v00946 * v01772;
  let v01688: f64 = v01193 * v01389;
  let v01666: f64 = v00036 * v01388;
  let v01441: f64 = v00036 * v00594;
  let v01676: f64 = v00988 * v01771;
  let v00101: f64 = (1i64) as f64 / ((v00036 * v01204) * v01664);
  let v01213: f64 = v00540 * v01688 + v00972 * v01675 + v00594 * v01663;
  let v01219: f64 = v01441 * (v01199 * v01393) + (v00540 * v01663 + v00972 * v01786) * v01666;
  let v01225: f64 = v00057 * (v00540 * v01674 + v00937 * v00972) + v00594 * v01676;
  let v01439: f64 = v00036 * v00101;
  let v01667: f64 = v00101 * v01388;
  let v01689: f64 = v01213 * v01388;
  if let Some(J_x) = J_x {
    let v00189: i64;
    if v00029 {
      v00189 = 1i64;
    } else {
      v00189 = 0i64;
    }
    let v00192: i64;
    if v00079 {
      v00192 = -1i64;
    } else {
      v00192 = 0i64;
    }
    let v00226: f64 = 0.75f64;
    let v01400: f64 = (2i64) as f64 * v00226;
    let v01699: f64 = v00001 * v01396;
    let v01114: f64 = v01506 + v00038 * v00038;
    let v01702: f64 = (2i64) as f64 * v01394;
    let v00239: f64;
    let v00270: f64;
    let v00367: f64;
    let v00381: f64;
    let v00412: f64;
    if v00043 {
      let v00231: f64 = (1i64) as f64 / v00050;
      let v01547: f64 = v00231 * v00950;
      let v01696: f64 = v01400 * v01454;
      let v01015: f64 = v00040 + v00520;
      let v01626: f64 = v00050 * (3i64) as f64;
      v00239 = v01015 * (v00950 * (v00226 * v00231) * v01699 + v01474) * (v00035 * (2i64) as f64) * v01771;
      v00270 = (v00231 * v01015 * v01696 + v01626) * v01425 * v01771;
      v00367 = (v00040 * v00231) * v01696 + v01626;
      v00381 = v00036 * (v01626 * v01774 + v01547 * v01696);
      v00412 = (v00950 * (v01400 * v01547) + v01114 * v01474) * v01702;
    } else {
      v00239 = (0i64) as f64;
      v00270 = (0i64) as f64;
      v00367 = (0i64) as f64;
      v00381 = (0i64) as f64;
      v00412 = (0i64) as f64;
    }
    let v01467: f64 = v00002 * (2i64) as f64;
    let v00253: f64;
    let v00276: f64;
    let v00287: f64;
    let v00320: f64;
    let v00335: f64;
    let v00349: f64;
    let v00358: f64;
    let v00373: f64;
    let v00387: f64;
    let v00401: f64;
    let v00418: f64;
    let v00434: f64;
    if v00067 {
      let v00245: f64 = (1i64) as f64 / v00070;
      let v01671: f64 = v01400 * ((2i64) as f64 * v00245);
      let v01027: f64 = v00035 * v00524 + v00038 * v00064;
      let v01465: f64 = v00245 * v00975;
      let v01078: f64 = v00062 * v00524 + v00056 * v00064;
      let v01464: f64 = v00245 * v00958;
      let v01759: f64 = v00524 * v01671;
      let v01458: f64 = v00070 * (3i64) as f64;
      let v01698: f64 = v01400 * v01465;
      let v01697: f64 = v01400 * v01464;
      let v01687: f64 = v00975 * v01400;
      v00253 = (v00958 * (v00226 * v00245) * v01699 + v01418) * ((2i64) as f64 * v01027) * v01771;
      v00276 = v00001 * (v00035 * v01458 + v01027 * v01759) * v01771;
      v00287 = (v01698 * -v01027 + v00649 * v01418) * v01389 * (v00001 * (2i64) as f64);
      v00320 = (v01697 * -v01078 + v00722 * v01418) * v01389 * v01467;
      v00335 = (v01402 * v01698 + v01418) * ((2i64) as f64 * v01078) * v01772;
      v00349 = v00002 * (v00062 * v01458 + v01078 * v01759) * v01772;
      v00358 = v00057 * (v01458 * v01778 + v00975 * v01759);
      v00373 = v01657 * v01671 + v01458;
      v00387 = v00036 * (v01458 * v01774 + v00958 * v01759);
      v00401 = (2i64) as f64 * (v01464 * v01687 + v00176 * v01418) * v01389;
      v00418 = (v00958 * v01697 + v01114 * v01418) * v01702;
      v00434 = v00057 * (v01465 * v01687 + (v00062 * v00062 + v01632) * v01418) * v01401;
    } else {
      v00253 = (0i64) as f64;
      v00276 = (0i64) as f64;
      v00287 = (0i64) as f64;
      v00320 = (0i64) as f64;
      v00335 = (0i64) as f64;
      v00349 = (0i64) as f64;
      v00358 = (0i64) as f64;
      v00373 = (0i64) as f64;
      v00387 = (0i64) as f64;
      v00401 = (0i64) as f64;
      v00418 = (0i64) as f64;
      v00434 = (0i64) as f64;
    }
    let v01417: f64 = v00038 * v01766;
    let v01433: f64 = v00001 * v00001;
    let v01695: f64 = v01417 * v01771;
    let v01390: f64 = v00008 * v00036;
    let v01429: f64 = v00036 * v00176;
    let v01074: f64 = v00056 * v00722 + v00062 * v00176;
    let v01045: f64 = (v00239 + v00253) * v01395 + v00036 * (v00019 * v01417 + v01670 * -v00176);
    let v01134: f64 = v01508 * v01785 + v00009 * v00649;
    let v01229: f64 = v00035 * v00176 + v00038 * v00649;
    let v00351: f64 = v01670 * v01778 + v00349 * v01395;
    let v01682: f64 = v00540 * v01390;
    let v00696: f64 = v01433 * v01695 + (v00270 + v00276) * v01395;
    let v01012: f64 = v00649 * (v00008 * v00056) + v01700;
    let v01739: f64 = v01388 * v01396;
    let v00773: f64 = v00381 + v00387;
    let v01571: f64 = v00009 * v00722;
    let v01760: f64 = v01204 * v01664;
    let v01707: f64 = v00358 * v01395;
    let v00402: f64 = v00401 * v01395;
    let v01717: f64 = v00773 * v01395;
    let v01256: f64 = v00062 + v00722 * v01774;
    let v00746: f64 = v00320 * v01395 + v01429 * v01670;
    let v01148: f64 = v01704 * v01766 + v01571;
    let v01683: f64 = v00594 * v01771;
    let v01640: f64 = v00057 * v00937;
    let v01096: f64 = v00335 * v01395 + (v00019 * v00056 + v00176 * (v01433 * v01771)) * v01388;
    let v01784: f64 = -v01389;
    let v00705: f64 = v00287 * v01395 + v01388 * v01397 * (v00001 * v00176);
    let v01762: f64 = ((2i64) as f64 * v00176) * v01682;
    let v00442: f64 = v01467 * (v00062 * v01388) + v01707;
    let v00813: f64 = v00402 + (v00002 * v00649) * v01739;
    let v00799: f64 = (2i64) as f64 * v01752 + v01717;
    let v01686: f64 = (v00412 + v00418) * v01395;
    let v00215: f64 = (1i64) as f64 / (v01394 * v01760 * v01760);
    let v00772: f64 = v00016 * ((1i64) as f64 + v00018 * -v00018) * v01758 + (v00367 + v00373) * v01395;
    let v01430: f64 = v00036 * v01193;
    let v01665: f64 = v01388 * v01771;
    let v01679: f64 = v01393 * (v00036 * v01199);
    let v01268: f64 = v01429 * v01571 + (v00062 * (v00036 * v00056) + v00038 * v01074 * v01771) * v01766;
    let v01238: f64 = (v00035 * v01695 + v00056 * v01229 * v01390) * v01785 + v01468 * (v00649 * v01390);
    let v01677: f64 = v01389 * v01430;
    let v01678: f64 = v01393 * (v00036 * v01196);
    let v01681: f64 = v00434 * v01395;
    let v00788: f64 = v00402 + v01555 * v01739;
    let v01776: f64 = -(2i64) as f64;
    let v01501: f64 = v00031 * v00101;
    let v00643: f64 = (v00192) as f64 + -(v00189) as f64;
    let v01761: f64 = v01430 * v01664;
    let v01763: f64 = (v00215 * v01268) * v01665;
    let v01669: f64 = v01388 * v01776;
    let v01765: f64 = v01664 * (v01238 * -v00215);
    let v01685: f64 = v00643 * v01501;
    let v01691: f64 = v01388 * v01439;
    J_x.set(0, 0, (0i64) as f64);
    J_x.set(0, 1, (0i64) as f64);
    J_x.set(0, 2, (0i64) as f64);
    J_x.set(0, 3, (1i64) as f64);
    J_x.set(0, 4, (0i64) as f64);
    J_x.set(0, 5, (0i64) as f64);
    J_x.set(1, 0, (0i64) as f64);
    J_x.set(1, 1, (0i64) as f64);
    J_x.set(1, 2, (0i64) as f64);
    J_x.set(1, 3, (0i64) as f64);
    J_x.set(1, 4, (1i64) as f64);
    J_x.set(1, 5, (0i64) as f64);
    J_x.set(2, 0, (0i64) as f64);
    J_x.set(2, 1, (0i64) as f64);
    J_x.set(2, 2, (0i64) as f64);
    J_x.set(2, 3, (0i64) as f64);
    J_x.set(2, 4, (0i64) as f64);
    J_x.set(2, 5, (1i64) as f64);
    J_x.set(3, 0, v01685 * v01761);
    J_x.set(3, 1, v01213 * (v00215 * v01238) * v01664 * v01665 * v01776 + (v01229 * v01393 * v01683 + v00696 * v01677 + v00705 * v01678 + (v00649 * v01762 + v00972 * v01012 + v00946 * v01045) * v01784) * v01667);
    J_x.set(3, 2, v01268 * ((2i64) as f64 * v00215) * v01665 * v01665 * v01689 + (v01096 * v01678 + v01441 * (v01256 * v01393) + v00351 * v01677 + (v00722 * v01762 + v01074 * (v00008 * v00972) + v00746 * v00946) * v01784) * v01667);
    J_x.set(3, 3, v00101 * (v00772 * v01761 + (v00358 * v01663 + v00773 * v01675) * v01395 * v01666));
    J_x.set(3, 4, (v00788 * v01663 + v01675 * v01686 + v00799 * v01688) * v01691);
    J_x.set(3, 5, (v01663 * v01681 + v00813 * v01675 + v00442 * v01688) * v01691);
    J_x.set(4, 0, (v01664 * v01685) * -v00946);
    J_x.set(4, 1, v01225 * v01669 * v01765 + v00101 * ((v00594 * v01134 + v00705 * v00988) * v01665 + (v01045 * v01640 + (v00540 * v01012 + v00696 * v00946) * v01784) * v01388));
    J_x.set(4, 2, v00101 * ((v00594 * v01148 + v00988 * v01096) * v01665 + (v00746 * v01640 + (v00972 * v01404 * (v00056 * v00062) + v01074 * v01682 + v00351 * (v00036 * v00946)) * v01772) * v01388) + (v01388 * v01388) * (v01225 * v01776) * v01763);
    J_x.set(4, 3, (v00057 * (v00772 * v01674 + v00937 * v01717) + v01676 * v01707) * v01667);
    J_x.set(4, 4, (v00057 * (v00799 * v01674 + v00937 * v01686) + v00788 * v01676) * v01667);
    J_x.set(4, 5, (v00057 * (v00813 * v00937 + v00442 * v01674) + v01676 * v01681) * v01667);
    J_x.set(5, 0, v01501 * v01678 * (v00643 * v01388));
    J_x.set(5, 1, (v01219 * v01776) * v01765 + v00101 * (v00705 * v01679 + ((v00540 * v01766) * (v01229 * v01771) + v00696 * v01663) * v01666 + -((2i64) as f64 * (v00035 * v01766) * v01683 * v01695 + (v00972 * v01134 + v00988 * v01045) * v01666)));
    J_x.set(5, 2, v01219 * v01669 * v01763 + v00101 * (v01096 * v01679 + (v00972 * v01148 + v00746 * v00988) * v01665 + (v01256 * (v00540 * v01393) + v00351 * v01663) * v01666));
    J_x.set(5, 3, v00101 * (v01678 * (v00772 * v01388) + (v01199 * (v00358 * v01393) + v00773 * v01388 * v01786) * (v00036 * v01395)));
    J_x.set(5, 4, v00101 * (v00788 * v01679 + (v01686 * v01786 + v00799 * v01663) * v01666));
    J_x.set(5, 5, v00101 * (v01679 * v01681 + (v00813 * v01786 + v00442 * v01663) * v01666));
  }
  x_dot.set(0, 0, v00000);
  x_dot.set(1, 0, v00001);
  x_dot.set(2, 0, v00002);
  x_dot.set(3, 0, v01439 * v01689);
  x_dot.set(4, 0, v01225 * v01667);
  x_dot.set(5, 0, v00101 * v01219);
}
