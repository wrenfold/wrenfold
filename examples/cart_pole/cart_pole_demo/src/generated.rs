//! Machine generated code.
#![cfg_attr(rustfmt, rustfmt_skip)]

#[inline]
#[allow(non_snake_case, clippy::unused_unit, clippy::collapsible_else_if, clippy::needless_late_init, unused_variables, unused_parens)]
pub fn cart_double_pole_dynamics<T1, T2, T4, >(params: &crate::CartPoleParams, x: &T1, x_dot: &mut T2, energy: Option<&mut f64>, J_x: Option<&mut T4>) -> ()
where
  T1: wrenfold_traits::Span2D<6, 1, ValueType = f64>,
  T2: wrenfold_traits::OutputSpan2D<6, 1, ValueType = f64>,
  T4: wrenfold_traits::OutputSpan2D<6, 6, ValueType = f64>,
{
  // Operation counts:
  // add: 158
  // branch: 11
  // call: 7
  // compare: 5
  // divide: 5
  // multiply: 444
  // negate: 23
  // total: 653
  
  let v00017: f64 = x.get(2, 0);
  let v00004: f64 = x.get(1, 0);
  let v00020: f64 = (v00017).sin();
  let v00005: f64 = (v00004).sin();
  let v00018: f64 = (v00017).cos();
  let v00016: f64 = (v00004).cos();
  let v00014: f64 = params.l_2;
  let v00002: f64 = x.get(5, 0);
  let v00008: f64 = params.l_1;
  let v00001: f64 = x.get(4, 0);
  let v01401: f64 = v00002 * v00014;
  let v00175: f64 = v00016 * v00018 + v00005 * v00020;
  let v01773: f64 = -v00005;
  let v00000: f64 = x.get(3, 0);
  let v01777: f64 = -v00020;
  let v01396: f64 = v00001 * v00008;
  let v00026: f64 = params.g;
  let v00011: f64 = params.m_2;
  let v00007: f64 = params.m_1;
  let v00080: f64 = params.m_b;
  if let Some(energy) = energy {
    let v00163: f64 = 0.5f64;
    let v00617: f64 = v00000 * v01773;
    let v00618: f64 = v00163 * v01396;
    let v01418: f64 = v00005 * v00008;
    let v01704: f64 = v00163 * (v00000 * v00000);
    *energy = v00080 * v01704 + v00007 * (((v00617 + v00618) * v01396 + v01704) + v00026 * v01418) + v00011 * (((v00618 + (v00617 + v00175 * v01401)) * v01396 + (v00000 * v01777 + v00163 * v01401) * v01401 + v01704) + v00026 * (v01418 + v00014 * v00020));
  }
  let v00091: f64 = params.v_mu_b;
  let v00093: f64;
  if (1e-06f64) < (v00091) {
    v00093 = v00091;
  } else {
    v00093 = 1e-06f64;
  }
  let v00100: f64 = params.x_s;
  let v00099: f64 = x.get(0, 0);
  let v00102: f64 = v00099 + -v00100;
  let v00103: bool = ((0i64) as f64) < (v00102);
  let v00104: f64;
  if v00103 {
    v00104 = v00102;
  } else {
    v00104 = (0i64) as f64;
  }
  let v01767: f64 = -(v00099 + v00100);
  let v00120: bool = ((0i64) as f64) < (v01767);
  let v00121: f64;
  if v00120 {
    v00121 = v01767;
  } else {
    v00121 = (0i64) as f64;
  }
  let v01770: f64 = -v00008;
  let v00033: f64 = v00000 + (v00001 * v00005) * v01770;
  let v01424: f64 = v00001 * v00016;
  let v01393: f64 = v00008 * v00008;
  let v01523: f64 = v00016 * v00016;
  let v00035: f64 = v01393 * v01424 * v01424 + v00033 * v00033;
  let v00047: f64 = (v00035).sqrt();
  let v00038: f64 = 1.5f64;
  let v01394: f64 = v00008 * (2i64) as f64;
  let v00916: f64 = v00033 * v01773 + v01396 * v01523;
  let v01473: f64 = v00038 * v00047;
  let v01454: f64 = v00033 * (2i64) as f64;
  let v00037: bool = ((0i64) as f64) < (v00035);
  let v00049: f64;
  let v00109: f64;
  if v00037 {
    v00049 = v01473 * (v00916 * v01394);
    v00109 = v01454 * v01473;
  } else {
    v00049 = (0i64) as f64;
    v00109 = (0i64) as f64;
  }
  let v00533: f64 = v00005 * v01396;
  let v00537: f64 = v00000 + -(v00533 + v00020 * v01401);
  let v00057: f64 = v00016 * v01396 + v00018 * v01401;
  let v01661: f64 = v00537 * v00537;
  let v00059: f64 = v00057 * v00057 + v01661;
  let v00069: f64 = (v00059).sqrt();
  let v00929: f64 = v00537 * v01773 + v00016 * v00057;
  let v01417: f64 = v00038 * v00069;
  let v01400: f64 = v00014 * (2i64) as f64;
  let v00974: f64 = v00537 * v01777 + v00018 * v00057;
  let v00060: bool = ((0i64) as f64) < (v00059);
  let v00071: f64;
  let v00113: f64;
  let v00135: f64;
  if v00060 {
    v00071 = v01417 * (v00929 * v01394);
    v00113 = v01417 * ((2i64) as f64 * v00537);
    v00135 = v00974 * v01400 * v01417;
  } else {
    v00071 = (0i64) as f64;
    v00113 = (0i64) as f64;
    v00135 = (0i64) as f64;
  }
  let v01765: f64 = v00007 + v00011;
  let v01784: f64 = -v01765;
  let v01387: f64 = v00011 * v00014;
  let v01702: f64 = v00018 * v01773;
  let v01524: f64 = v00016 * v00020;
  let v00081: f64 = v00080 + v01765;
  let v00094: f64 = (1i64) as f64 / v00093;
  let v01700: f64 = v00016 * v01784;
  let v01669: f64 = v01387 * (v00002 * v00002);
  let v00648: f64 = v01524 + v01702;
  let v00721: f64 = v00020 * -v00016 + v00005 * v00018;
  let v01772: f64 = -v00011;
  let v01613: f64 = v00020 * v00020;
  let v01404: f64 = v00011 * (2i64) as f64;
  let v01391: f64 = v00008 * v01765;
  let v01778: f64 = -v00026;
  let v01554: f64 = v00001 * v00721;
  let v01708: f64 = v01765 * v01773;
  let v01751: f64 = v01391 * v01424;
  let v01395: f64 = -0.16666666666666666f64 * params.c_d;
  let v00105: f64 = params.k_s;
  let v01757: f64 = (v00081 * params.mu_b) * v01778;
  let v00096: f64 = (v00000 * v00094).tanh();
  let v01475: f64 = v00081 * v00175;
  let v00963: f64 = v00081 + v01613 * v01772;
  let v01753: f64 = v01773 * v01784;
  let v01195: f64 = v00020 + v00175 * v01773;
  let v00987: f64 = (v00020 * v01765) * v01773 + v01475;
  let v00912: f64 = v00020 * (v00011 * v00175) + v01708;
  let v01662: f64 = v01195 * v01391;
  let v00583: f64 = v00096 * v01757 + v00018 * v01669 + v00105 * (v00121 + -v00104) + (v00109 + v00113) * v01395 + v00001 * v01751;
  let v01785: f64 = -v00987;
  let v00943: f64 = (v00049 + v00071) * v01395 + v00008 * (v00648 * v01669 + v00026 * v01700);
  let v01673: f64 = v00912 * v01770;
  let v01388: f64 = v00008 * v00014;
  let v01203: f64 = v00175 * v01475 * v01772 + (v01404 * (v00020 * v00175) + v01708) * v01753 + v00963 * v01765;
  let v01192: f64 = (v00175 * v00175) * v01772 + v01765;
  let v01771: f64 = -v00014;
  let v01198: f64 = v00081 + v01753 * v01773;
  let v00593: f64 = v00135 * v01395 + (v00018 * v01778 + v01396 * v01554) * v01387;
  let v01663: f64 = v01387 * v01388;
  let v01687: f64 = v01192 * v01388;
  let v01674: f64 = v00912 * v01771;
  let v01665: f64 = v00008 * v01387;
  let v01437: f64 = v00008 * v00593;
  let v01675: f64 = v00987 * v01770;
  let v00088: f64 = (1i64) as f64 / ((v00008 * v01203) * v01663);
  let v01212: f64 = v00943 * v01674 + v00583 * v01687 + v00593 * v01662;
  let v01218: f64 = v01437 * (v01198 * v01391) + (v00943 * v01785 + v00583 * v01662) * v01665;
  let v01224: f64 = v00014 * (v00583 * v01673 + v00943 * v00963) + v00593 * v01675;
  let v01435: f64 = v00008 * v00088;
  let v01666: f64 = v00088 * v01387;
  let v01688: f64 = v01212 * v01387;
  if let Some(J_x) = J_x {
    let v00188: i64;
    if v00103 {
      v00188 = 1i64;
    } else {
      v00188 = 0i64;
    }
    let v00191: i64;
    if v00120 {
      v00191 = -1i64;
    } else {
      v00191 = 0i64;
    }
    let v00225: f64 = 0.75f64;
    let v01399: f64 = (2i64) as f64 * v00225;
    let v01698: f64 = v00001 * v01394;
    let v01113: f64 = v01523 + v00005 * v00005;
    let v01703: f64 = (2i64) as f64 * v01393;
    let v00238: f64;
    let v00269: f64;
    let v00366: f64;
    let v00380: f64;
    let v00411: f64;
    if v00037 {
      let v00230: f64 = (1i64) as f64 / v00047;
      let v01546: f64 = v00230 * v00916;
      let v01695: f64 = v01399 * v01454;
      let v01014: f64 = v00033 + v00533;
      let v01635: f64 = v00047 * (3i64) as f64;
      v00238 = v01014 * (v00916 * (v00225 * v00230) * v01698 + v01473) * (v00016 * (2i64) as f64) * v01770;
      v00269 = (v00230 * v01014 * v01695 + v01635) * v01424 * v01770;
      v00366 = (v00033 * v00230) * v01695 + v01635;
      v00380 = v00008 * (v01635 * v01773 + v01546 * v01695);
      v00411 = (v00916 * (v01399 * v01546) + v01113 * v01473) * v01703;
    } else {
      v00238 = (0i64) as f64;
      v00269 = (0i64) as f64;
      v00366 = (0i64) as f64;
      v00380 = (0i64) as f64;
      v00411 = (0i64) as f64;
    }
    let v01466: f64 = v00002 * (2i64) as f64;
    let v00252: f64;
    let v00275: f64;
    let v00286: f64;
    let v00319: f64;
    let v00334: f64;
    let v00348: f64;
    let v00357: f64;
    let v00372: f64;
    let v00386: f64;
    let v00400: f64;
    let v00417: f64;
    let v00433: f64;
    if v00060 {
      let v00244: f64 = (1i64) as f64 / v00069;
      let v01670: f64 = v01399 * ((2i64) as f64 * v00244);
      let v01026: f64 = v00016 * v00537 + v00005 * v00057;
      let v01464: f64 = v00244 * v00974;
      let v01077: f64 = v00018 * v00537 + v00020 * v00057;
      let v01463: f64 = v00244 * v00929;
      let v01758: f64 = v00537 * v01670;
      let v01457: f64 = v00069 * (3i64) as f64;
      let v01697: f64 = v01399 * v01464;
      let v01696: f64 = v01399 * v01463;
      let v01686: f64 = v00974 * v01399;
      v00252 = (v00929 * (v00225 * v00244) * v01698 + v01417) * ((2i64) as f64 * v01026) * v01770;
      v00275 = v00001 * (v00016 * v01457 + v01026 * v01758) * v01770;
      v00286 = (v01697 * -v01026 + v00648 * v01417) * v01388 * (v00001 * (2i64) as f64);
      v00319 = (v01696 * -v01077 + v00721 * v01417) * v01388 * v01466;
      v00334 = (v01401 * v01697 + v01417) * ((2i64) as f64 * v01077) * v01771;
      v00348 = v00002 * (v00018 * v01457 + v01077 * v01758) * v01771;
      v00357 = v00014 * (v01457 * v01777 + v00974 * v01758);
      v00372 = v01661 * v01670 + v01457;
      v00386 = v00008 * (v01457 * v01773 + v00929 * v01758);
      v00400 = (2i64) as f64 * (v01463 * v01686 + v00175 * v01417) * v01388;
      v00417 = (v00929 * v01696 + v01113 * v01417) * v01703;
      v00433 = v00014 * (v01464 * v01686 + (v00018 * v00018 + v01613) * v01417) * v01400;
    } else {
      v00252 = (0i64) as f64;
      v00275 = (0i64) as f64;
      v00286 = (0i64) as f64;
      v00319 = (0i64) as f64;
      v00334 = (0i64) as f64;
      v00348 = (0i64) as f64;
      v00357 = (0i64) as f64;
      v00372 = (0i64) as f64;
      v00386 = (0i64) as f64;
      v00400 = (0i64) as f64;
      v00417 = (0i64) as f64;
      v00433 = (0i64) as f64;
    }
    let v01414: f64 = v00005 * v01765;
    let v01432: f64 = v00001 * v00001;
    let v01694: f64 = v01414 * v01770;
    let v01389: f64 = v00008 * v00011;
    let v01426: f64 = v00008 * v00175;
    let v01073: f64 = v00020 * v00721 + v00018 * v00175;
    let v01044: f64 = (v00238 + v00252) * v01395 + v00008 * (v00026 * v01414 + v01669 * -v00175);
    let v01133: f64 = v01524 * v01784 + v00081 * v00648;
    let v01228: f64 = v00016 * v00175 + v00005 * v00648;
    let v00350: f64 = v01669 * v01777 + v00348 * v01395;
    let v01681: f64 = v00583 * v01389;
    let v00695: f64 = v01432 * v01694 + (v00269 + v00275) * v01395;
    let v01011: f64 = v00648 * (v00011 * v00020) + v01700;
    let v01738: f64 = v01387 * v01394;
    let v00772: f64 = v00380 + v00386;
    let v01642: f64 = v00081 * v00721;
    let v01759: f64 = v01203 * v01663;
    let v01706: f64 = v00357 * v01395;
    let v00401: f64 = v00400 * v01395;
    let v01716: f64 = v00772 * v01395;
    let v01255: f64 = v00018 + v00721 * v01773;
    let v00745: f64 = v00319 * v01395 + v01426 * v01669;
    let v01147: f64 = v01702 * v01765 + v01642;
    let v01682: f64 = v00593 * v01770;
    let v01607: f64 = v00014 * v00963;
    let v01095: f64 = v00334 * v01395 + (v00020 * v00026 + v00175 * (v01432 * v01770)) * v01387;
    let v01783: f64 = -v01388;
    let v00704: f64 = v00286 * v01395 + v01387 * v01396 * (v00001 * v00175);
    let v01761: f64 = ((2i64) as f64 * v00175) * v01681;
    let v00441: f64 = v01466 * (v00018 * v01387) + v01706;
    let v00812: f64 = v00401 + (v00002 * v00648) * v01738;
    let v00798: f64 = (2i64) as f64 * v01751 + v01716;
    let v01685: f64 = (v00411 + v00417) * v01395;
    let v00214: f64 = (1i64) as f64 / (v01393 * v01759 * v01759);
    let v00771: f64 = v00094 * ((1i64) as f64 + v00096 * -v00096) * v01757 + (v00366 + v00372) * v01395;
    let v01427: f64 = v00008 * v01192;
    let v01664: f64 = v01387 * v01770;
    let v01678: f64 = v01391 * (v00008 * v01198);
    let v01267: f64 = v01426 * v01642 + (v00018 * (v00008 * v00020) + v00005 * v01073 * v01770) * v01765;
    let v01237: f64 = (v00016 * v01694 + v00020 * v01228 * v01389) * v01784 + v01475 * (v00648 * v01389);
    let v01676: f64 = v01388 * v01427;
    let v01677: f64 = v01391 * (v00008 * v01195);
    let v01680: f64 = v00433 * v01395;
    let v00787: f64 = v00401 + v01554 * v01738;
    let v01775: f64 = -(2i64) as f64;
    let v01540: f64 = v00088 * v00105;
    let v00642: f64 = (v00191) as f64 + -(v00188) as f64;
    let v01760: f64 = v01427 * v01663;
    let v01762: f64 = (v00214 * v01267) * v01664;
    let v01668: f64 = v01387 * v01775;
    let v01764: f64 = v01663 * (v01237 * -v00214);
    let v01684: f64 = v00642 * v01540;
    let v01690: f64 = v01387 * v01435;
    J_x.set(0, 0, (0i64) as f64);
    J_x.set(0, 1, (0i64) as f64);
    J_x.set(0, 2, (0i64) as f64);
    J_x.set(0, 3, (1i64) as f64);
    J_x.set(0, 4, (0i64) as f64);
    J_x.set(0, 5, (0i64) as f64);
    J_x.set(1, 0, (0i64) as f64);
    J_x.set(1, 1, (0i64) as f64);
    J_x.set(1, 2, (0i64) as f64);
    J_x.set(1, 3, (0i64) as f64);
    J_x.set(1, 4, (1i64) as f64);
    J_x.set(1, 5, (0i64) as f64);
    J_x.set(2, 0, (0i64) as f64);
    J_x.set(2, 1, (0i64) as f64);
    J_x.set(2, 2, (0i64) as f64);
    J_x.set(2, 3, (0i64) as f64);
    J_x.set(2, 4, (0i64) as f64);
    J_x.set(2, 5, (1i64) as f64);
    J_x.set(3, 0, v01684 * v01760);
    J_x.set(3, 1, v01212 * (v00214 * v01237) * v01663 * v01664 * v01775 + (v01228 * v01391 * v01682 + v00695 * v01676 + v00704 * v01677 + (v00648 * v01761 + v00943 * v01011 + v00912 * v01044) * v01783) * v01666);
    J_x.set(3, 2, v01267 * ((2i64) as f64 * v00214) * v01664 * v01664 * v01688 + (v01095 * v01677 + v01437 * (v01255 * v01391) + v00350 * v01676 + (v00721 * v01761 + v01073 * (v00011 * v00943) + v00745 * v00912) * v01783) * v01666);
    J_x.set(3, 3, v00088 * (v00771 * v01760 + (v00357 * v01662 + v00772 * v01674) * v01395 * v01665));
    J_x.set(3, 4, (v00787 * v01662 + v01674 * v01685 + v00798 * v01687) * v01690);
    J_x.set(3, 5, (v01662 * v01680 + v00812 * v01674 + v00441 * v01687) * v01690);
    J_x.set(4, 0, (v01663 * v01684) * -v00912);
    J_x.set(4, 1, v01224 * v01668 * v01764 + v00088 * ((v00593 * v01133 + v00704 * v00987) * v01664 + (v01044 * v01607 + (v00583 * v01011 + v00695 * v00912) * v01783) * v01387));
    J_x.set(4, 2, v00088 * ((v00593 * v01147 + v00987 * v01095) * v01664 + (v00745 * v01607 + (v00943 * v01404 * (v00018 * v00020) + v01073 * v01681 + v00350 * (v00008 * v00912)) * v01771) * v01387) + (v01387 * v01387) * (v01224 * v01775) * v01762);
    J_x.set(4, 3, (v00014 * (v00771 * v01673 + v00963 * v01716) + v01675 * v01706) * v01666);
    J_x.set(4, 4, (v00014 * (v00798 * v01673 + v00963 * v01685) + v00787 * v01675) * v01666);
    J_x.set(4, 5, (v00014 * (v00812 * v00963 + v00441 * v01673) + v01675 * v01680) * v01666);
    J_x.set(5, 0, v01540 * v01677 * (v00642 * v01387));
    J_x.set(5, 1, (v01218 * v01775) * v01764 + v00088 * (v00704 * v01678 + ((v00583 * v01765) * (v01228 * v01770) + v00695 * v01662) * v01665 + -((2i64) as f64 * (v00016 * v01765) * v01682 * v01694 + (v00943 * v01133 + v00987 * v01044) * v01665)));
    J_x.set(5, 2, v01218 * v01668 * v01762 + v00088 * (v01095 * v01678 + (v00943 * v01147 + v00745 * v00987) * v01664 + (v01255 * (v00583 * v01391) + v00350 * v01662) * v01665));
    J_x.set(5, 3, v00088 * (v01677 * (v00771 * v01387) + (v01198 * (v00357 * v01391) + v00772 * v01387 * v01785) * (v00008 * v01395)));
    J_x.set(5, 4, v00088 * (v00787 * v01678 + (v01685 * v01785 + v00798 * v01662) * v01665));
    J_x.set(5, 5, v00088 * (v01678 * v01680 + (v00812 * v01785 + v00441 * v01662) * v01665));
  }
  x_dot.set(0, 0, v00000);
  x_dot.set(1, 0, v00001);
  x_dot.set(2, 0, v00002);
  x_dot.set(3, 0, v01435 * v01688);
  x_dot.set(4, 0, v01224 * v01666);
  x_dot.set(5, 0, v00088 * v01218);
}
