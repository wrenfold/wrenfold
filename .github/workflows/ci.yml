name: ci

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - "*"

  # Allow manual trigger for this workflow.
  workflow_dispatch:

  # This can be called from build-wheels.
  workflow_call:

  # Run every Monday
  schedule:
    - cron: "0 0 * * 1"


jobs:
  build:
    strategy:
      # Let other OS runners continue if one fails.
      fail-fast: false
      matrix:
        sys:
          - {
              os: windows-2019,
              shell: pwsh,
              compiler_packages: "",
              name_suffix: "default",
              cc_env: "cl.exe",
              cxx_env: "cl.exe"
            }
          - {
              os: windows-2022,
              shell: pwsh,
              compiler_packages: "",
              name_suffix: "default",
              cc_env: "cl.exe",
              cxx_env: "cl.exe"
            }
          - {
              os: ubuntu-latest,
              shell: "bash -el {0}",
              compiler_packages: "g++-13",
              name_suffix: "gcc13",
              cc_env: "gcc-13",
              cxx_env: "g++-13"
            }
          - {
              os: ubuntu-24.04,
              shell: "bash -el {0}",
              compiler_packages: "g++-14",
              name_suffix: "gcc14",
              cc_env: "gcc-14",
              cxx_env: "g++-14"
            }
          - {
              os: macos-14,
              shell: "bash -el {0}",
              compiler_packages: "",
              name_suffix: "default",
              cc_env: "clang",
              cxx_env: "clang++"
            }
        build_type: [RelWithDebInfo]

    name: ${{ matrix.sys.os }}-${{ matrix.build_type }}-${{ matrix.sys.name_suffix }}
    runs-on: ${{ matrix.sys.os }}
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-python@v5
        id: pyinstall
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Print python location
        shell: bash
        run: echo ${{ steps.pyinstall.outputs.python-path }}

      - name: Install python packages
        run: |
          ${{ steps.pyinstall.outputs.python-path }} -m pip install -r requirements.txt

      - if: runner.os != 'macOS'
        name: Install PyTorch (non OSX)
        run: >
          ${{ steps.pyinstall.outputs.python-path }} -m pip install
          torch
          --extra-index-url https://download.pytorch.org/whl/cpu

      - if: runner.os == 'macOS'
        name: Install PyTorch (OSX)
        run: ${{ steps.pyinstall.outputs.python-path }} -m pip install torch

      - name: Install doxygen
        uses: ssciwr/doxygen-install@v1
        with:
          version: "1.12.0"

      - if: runner.os == 'Linux'
        name: Add repositories for GCC
        run: sudo apt-add-repository ppa:ubuntu-toolchain-r/test

      - if: runner.os == 'Linux'
        name: Install GCC
        run: |
          sudo apt update
          sudo apt install ${{ matrix.sys.compiler_packages }}

        # Add MSVC to the command line:
      - if: runner.os == 'Windows'
        name: Enable developer command prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - if: runner.os == 'macOS'
        name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Create build directory
        run: cmake -E make_directory ${{github.workspace}}/build-${{matrix.build_type}}

      - name: Configure
        working-directory: ${{github.workspace}}/build-${{matrix.build_type}}
        env:
          CC: ${{ matrix.sys.cc_env }}
          CXX: ${{ matrix.sys.cxx_env }}
        run: >
          cmake ${{github.workspace}}
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -Wno-deprecated
          -G Ninja
          -DWF_BUILD_STUBS=ON
          -DWF_DOCS_REQUIRED=ON
          -DPython_ROOT_DIR=${{ env.Python_ROOT_DIR }}
          -DPython_FIND_STRATEGY=LOCATION
          -DPython_FIND_REGISTRY=NEVER
          -DPython_FIND_FRAMEWORK=NEVER
          -DPython_FIND_VIRTUALENV=NEVER

      - if: runner.os == 'Windows'
        name: Build (Windows)
        working-directory: ${{github.workspace}}/build-${{matrix.build_type}}
        run: |
          $threads = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
          cmake --build . --config ${{matrix.build_type}} --parallel $threads

      - if: runner.os == 'macOS'
        name: Build (OSX)
        working-directory: ${{github.workspace}}/build-${{matrix.build_type}}
        run: |
          threads=`sysctl -n hw.logicalcpu`
          cmake --build . --config ${{matrix.build_type}} --parallel $threads

      - if: runner.os == 'Linux'
        name: Build (Linux)
        working-directory: ${{github.workspace}}/build-${{matrix.build_type}}
        run: |
          threads=`nproc`
          cmake --build . --config ${{matrix.build_type}} --parallel $threads

      - name: Check stubs for diff
        working-directory: ${{github.workspace}}
        run: git diff --name-only --exit-code components/wrapper/stubs

      - name: Run CTest
        working-directory: ${{github.workspace}}/build-${{matrix.build_type}}
        run: ctest --output-on-failure

      - name: Install rust
        run: rustup toolchain install 1.81

      - name: Set default rust version
        run: rustup default 1.81

      - name: Install clippy
        run: rustup component add rustfmt clippy

      - name: Dump rustc version
        run: rustc --version

      # Run pre-commit formatting checks.
      # We have to do this down here so that the generated rust files exist.
      - name: Pre-commit checks
        working-directory: ${{github.workspace}}
        run: pre-commit run --all-files

      # Install OpenBLAS for the motion_planning example.
      - if: runner.os == 'Linux'
        name: Install OpenBLAS
        run: |
          sudo apt update
          sudo apt install libopenblas-dev

      - name: Cache rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> ${{github.workspace}}/build-${{matrix.build_type}}/cargo

      - name: Cargo test
        working-directory: ${{github.workspace}}/build-${{matrix.build_type}}
        run: cargo test --tests --release --color=always --target-dir cargo --manifest-path ${{github.workspace}}/Cargo.toml

      - name: Cargo clippy
        working-directory: ${{github.workspace}}/build-${{matrix.build_type}}
        run: cargo clippy --all --color=always --target-dir cargo --manifest-path ${{github.workspace}}/Cargo.toml -- -D warnings --no-deps

      - name: Build docs
        working-directory: ${{github.workspace}}/build-${{matrix.build_type}}
        run: cmake --build . --config ${{matrix.build_type}} --target wf_docs
