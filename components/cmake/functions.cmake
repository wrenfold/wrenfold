define_property(
  TARGET
  PROPERTY GENERATED_SOURCE_FILE
  BRIEF_DOCS "Path of the source file generated by a code-generation target.")

# Define a code-generator written in C++ with target name `NAME`.
# OUTPUT_FILE_NAME: Name of the output file to put in the build directory.
# SOURCE_FILES: List of C++ files used to build the generator.
function(add_compiled_code_generator NAME)
  set(options "")
  set(oneValueArgs OUTPUT_FILE_NAME)
  set(multiValueArgs SOURCE_FILES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}"
                        ${ARGN})

  set(generate_target ${NAME})
  if(${ARGS_OUTPUT_FILE_NAME} STREQUAL "")
    message(FATAL_ERROR "Must specify the OUTPUT_FILE_NAME argument.")
  endif()
  set(GENERATOR_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/${NAME}")
  set(GENERATOR_OUTPUT_FILE "${GENERATOR_OUTPUT_DIR}/${ARGS_OUTPUT_FILE_NAME}")

  # Add an executable target with the provided source files.
  add_executable(${generate_target} ${ARGS_SOURCE_FILES})
  target_link_libraries(${generate_target} wf-core wf-runtime wf-test-support)
  target_compile_definitions(
    ${generate_target}
    PRIVATE "-DGENERATOR_OUTPUT_FILE=\"${GENERATOR_OUTPUT_FILE}\"")
  target_compile_options(${generate_target} PRIVATE ${SHARED_WARNING_FLAGS})

  # Record the output file as a custom property on the target:
  set_target_properties(${generate_target} PROPERTIES GENERATED_SOURCE_FILE
                                                      ${GENERATOR_OUTPUT_FILE})

  # Add a target that runs the generation:
  add_custom_command(
    OUTPUT ${GENERATOR_OUTPUT_FILE}
    COMMAND
      "$<TARGET_FILE_DIR:${generate_target}>/$<TARGET_FILE_NAME:${generate_target}>"
    WORKING_DIRECTORY ${GENERATOR_OUTPUT_DIR}
    COMMENT "Run code-generator: ${NAME}"
    DEPENDS ${generate_target})

  # A custom target for running the code-generation. This is so the user can
  # explicitly run this target from the command line.
  add_custom_target(${generate_target}_run DEPENDS ${GENERATOR_OUTPUT_FILE})
endfunction()

# Add a test written in C++. GENERATOR_TARGET: Make this test depend on the
# specified code-generator target. SOURCE_FILES: Source files of the test.
function(add_cpp_test NAME)
  set(options "")
  set(oneValueArgs GENERATOR_TARGET)
  set(multiValueArgs SOURCE_FILES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}"
                        ${ARGN})

  set(GENERATOR_OUTPUT "")
  if(NOT ${ARGS_GENERATOR_TARGET} STREQUAL "")
    get_target_property(GENERATOR_OUTPUT ${ARGS_GENERATOR_TARGET}
                        GENERATED_SOURCE_FILE)
    message(
      STATUS "Adding test: ${NAME} (uses generator ${ARGS_GENERATOR_TARGET})")
  else()
    message(STATUS "Adding test: ${NAME}")
  endif()

  # add executable for the test:
  add_executable(${NAME} ${ARGS_SOURCE_FILES} ${GENERATOR_OUTPUT}
                         $<TARGET_OBJECTS:wf-custom-main>)
  if(NOT ${ARGS_GENERATOR_TARGET} STREQUAL "")
    add_dependencies(${NAME} ${ARGS_GENERATOR_TARGET})
  endif()

  # Make sure generated file is on the include path.
  if(NOT ${GENERATOR_OUTPUT} STREQUAL "")
    cmake_path(GET GENERATOR_OUTPUT PARENT_PATH GENERATOR_INCLUDE_DIR)
    target_include_directories(${NAME} PRIVATE ${GENERATOR_INCLUDE_DIR})
  endif()

  target_link_libraries(
    ${NAME}
    wf-core
    wf-runtime
    wf-test-support
    gtest
    eigen
    fmt::fmt-header-only)
  target_compile_options(${NAME} PRIVATE ${SHARED_WARNING_FLAGS})
  if(NOT MSVC)
    target_compile_options(${NAME} PRIVATE -Wno-unused-comparison)
  endif()

  add_test(${NAME} ${NAME})
endfunction()

# Add a code-generator defined in python.
function(add_py_code_generator NAME MAIN_SCRIPT_FILE)
  set(options "")
  set(oneValueArgs OUTPUT_FILE_NAME)
  set(multiValueArgs SOURCE_FILES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}"
                        ${ARGN})

  if(NOT DEFINED Python_EXECUTABLE)
    message(FATAL_ERROR "The Python executable could not be located.")
  endif()

  if(WIN32)
    set(PATH_SEP "\;")
  else()
    set(PATH_SEP ":")
  endif()

  # Add a custom command that runs the generation:
  if(${ARGS_OUTPUT_FILE_NAME} STREQUAL "")
    message(FATAL_ERROR "Must specify the OUTPUT_FILE_NAME argument.")
  endif()
  set(GENERATOR_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/${NAME}")
  set(GENERATOR_OUTPUT_FILE "${GENERATOR_OUTPUT_DIR}/${ARGS_OUTPUT_FILE_NAME}")

  set(COMMAND_ENV_VARIABLES "")
  list(
    APPEND
    COMMAND_ENV_VARIABLES
    "PYTHONPATH=\"${COMPONENTS_BINARY_DIR}/wrapper${PATH_SEP}${COMPONENTS_SOURCE_DIR}/python\""
  )

  add_custom_command(
    OUTPUT ${GENERATOR_OUTPUT_FILE}
    COMMAND
      ${CMAKE_COMMAND} -E env ${COMMAND_ENV_VARIABLES} ${Python_EXECUTABLE} -B
      "${CMAKE_CURRENT_SOURCE_DIR}/${MAIN_SCRIPT_FILE}"
      "${GENERATOR_OUTPUT_FILE}"
    WORKING_DIRECTORY ${GENERATOR_OUTPUT_DIR}
    COMMENT "Run python code-generator: ${NAME}"
    DEPENDS wf-core wf_wrapper ${MAIN_SCRIPT_FILE} ${SOURCE_FILES})

  # Create a target we can attach the output source file to as a property.
  add_custom_target(${NAME} DEPENDS ${GENERATOR_OUTPUT_FILE})
  set_target_properties(${NAME} PROPERTIES GENERATED_SOURCE_FILE
                                           ${GENERATOR_OUTPUT_FILE})
endfunction()

# Define a new python test.
function(add_python_test PYTHON_SOURCE_FILE)
  get_filename_component(TEST_NAME ${PYTHON_SOURCE_FILE} NAME_WE)
  if(WIN32)
    set(PATH_SEP ";")
  else()
    set(PATH_SEP ":")
  endif()

  if(NOT DEFINED Python_EXECUTABLE)
    message(FATAL_ERROR "The Python executable could not be located.")
  endif()

  # In order for `PYTHONPATH` to be set correctly, we need to pass the
  # environment variable using the cmake command. No other mechanism I have
  # tried will work here.
  add_test(
    NAME ${TEST_NAME}
    COMMAND
      ${CMAKE_COMMAND} -E env
      "PYTHONPATH=${COMPONENTS_BINARY_DIR}/wrapper${PATH_SEP}${COMPONENTS_SOURCE_DIR}/python"
      ${Python_EXECUTABLE} -B ${CMAKE_CURRENT_SOURCE_DIR}/${PYTHON_SOURCE_FILE})
  message(STATUS "Added python test: ${TEST_NAME}")
endfunction()

# Add a unit test written in Rust. Rust tests are implemented in individual
# crates, which we build from CMake. This method adds a target to ALL to trigger
# building of the crate, then it adds a call to `cargo test` to the ctest step.
# CRATE_NAME: Name of the crate in the current source directory.
# GENERATOR_TARGET: Optional name of the target that code-generates rust code.
# CRATE_SOURCES: Source files in the crate.
function(add_rust_test NAME)
  set(options "")
  set(oneValueArgs CRATE_NAME GENERATOR_TARGET)
  set(multiValueArgs CRATE_SOURCES)
  cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}"
                        ${ARGN})

  if(NOT DEFINED CARGO_PATH)
    message(FATAL_ERROR "Failed to find cargo.")
  endif()

  # Get the output file from the code-generation step, if it was specified.
  set(GENERATOR_OUTPUT "")
  if(NOT ${ARGS_GENERATOR_TARGET} STREQUAL "")
    get_target_property(GENERATOR_OUTPUT ${ARGS_GENERATOR_TARGET}
                        GENERATED_SOURCE_FILE)
    message(
      STATUS
        "Adding rust test: ${NAME} (uses generator ${ARGS_GENERATOR_TARGET})")
  else()
    message(STATUS "Adding rust test: ${NAME}")
  endif()

  # Add a target to do the cargo build:
  set(CARGO_ENV_VARIABLES
      "CODE_GENERATION_FILE=${GENERATOR_OUTPUT}" "CARGO_CMD=test"
      "CARGO_TARGET_DIR=${CMAKE_CURRENT_BINARY_DIR}/target")

  set(CARGO_ARGS --color always)
  if("${CMAKE_BUILD_TYPE}" STREQUAL "Release" OR "${CMAKE_BUILD_TYPE}" STREQUAL
                                                 "RelWithDebInfo")
    list(APPEND CARGO_ARGS --release)
  endif()

  # Add target to build the test without running.
  set(CRATE_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/${ARGS_CRATE_NAME}")
  add_custom_target(
    ${NAME}_build ALL
    COMMAND ${CMAKE_COMMAND} -E env ${CARGO_ENV_VARIABLES} ${CARGO_PATH} test
            ${CARGO_ARGS} --no-run
    WORKING_DIRECTORY ${CRATE_ROOT}
    COMMENT "Cargo build for: ${NAME}"
    DEPENDS ${GENERATOR_TARGET} ${GENERATOR_OUTPUT} ${ARGS_CRATE_SOURCES}
            "${CRATE_ROOT}/Cargo.toml")

  # Add a target to run the test
  add_test(
    NAME ${NAME}
    COMMAND ${CMAKE_COMMAND} -E env ${CARGO_ENV_VARIABLES} ${CARGO_PATH} test
            ${CARGO_ARGS}
    WORKING_DIRECTORY ${CRATE_ROOT})
endfunction()
