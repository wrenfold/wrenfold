import pywrenfold.ast
import pywrenfold.sym
import pywrenfold.type_info
from typing import Any, ClassVar, overload

class Argument:
    def __init__(self, *args, **kwargs) -> None: ...
    def create_symbolic_input(self) -> pywrenfold.sym.Expr | pywrenfold.sym.MatrixExpr | pywrenfold.sym.CompoundExpr: ...
    @property
    def direction(self) -> ArgumentDirection: ...
    @property
    def is_input(self) -> bool: ...
    @property
    def is_optional(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> pywrenfold.type_info.ScalarType | pywrenfold.type_info.MatrixType | pywrenfold.type_info.CustomType: ...

class ArgumentDirection:
    __members__: ClassVar[dict] = ...  # read-only
    Input: ClassVar[ArgumentDirection] = ...
    OptionalOutput: ClassVar[ArgumentDirection] = ...
    Output: ClassVar[ArgumentDirection] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class BaseGenerator:
    def __init__(self) -> None: ...
    @overload
    def format(self, element: pywrenfold.ast.Add) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignTemporary) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputMatrix) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputScalar) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputStruct) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.BooleanLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Branch) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.CallExternalFunction) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.CallStdFunction) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Cast) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Comment) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Compare) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ConstructCustomType) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ConstructMatrix) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Declaration) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Divide) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.FloatLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetArgument) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetField) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetMatrixElement) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.IntegerLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Multiply) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Negate) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.OptionalOutputBranch) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Parenthetical) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.SpecialConstant) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ReturnObject) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Ternary) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.VariableRef) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.FunctionSignature) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.ScalarType) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.MatrixType) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.CustomType) -> str: ...
    @overload
    def generate(self, definition: pywrenfold.ast.FunctionDefinition) -> str: ...
    @overload
    def generate(self, definition: list[pywrenfold.ast.FunctionDefinition]) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Add) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignTemporary) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputMatrix) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputScalar) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputStruct) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.BooleanLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Branch) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.CallExternalFunction) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.CallStdFunction) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Cast) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Comment) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Compare) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ConstructCustomType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ConstructMatrix) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Declaration) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Divide) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.FloatLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetArgument) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetField) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetMatrixElement) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.IntegerLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Multiply) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Negate) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.OptionalOutputBranch) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Parenthetical) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.SpecialConstant) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ReturnObject) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Ternary) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.VariableRef) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.FunctionSignature) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.ScalarType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.MatrixType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.CustomType) -> str: ...

class CppGenerator:
    def __init__(self) -> None: ...
    @staticmethod
    def apply_preamble(code: str, namespace: str, imports: str = ...) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Add) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignTemporary) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputMatrix) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputScalar) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputStruct) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.BooleanLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Branch) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.CallExternalFunction) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.CallStdFunction) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Cast) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Comment) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Compare) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ConstructCustomType) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ConstructMatrix) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Declaration) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Divide) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.FloatLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetArgument) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetField) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetMatrixElement) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.IntegerLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Multiply) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Negate) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.OptionalOutputBranch) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Parenthetical) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.SpecialConstant) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ReturnObject) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Ternary) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.VariableRef) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.FunctionSignature) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.ScalarType) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.MatrixType) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.CustomType) -> str: ...
    @overload
    def generate(self, definition: pywrenfold.ast.FunctionDefinition) -> str: ...
    @overload
    def generate(self, definition: list[pywrenfold.ast.FunctionDefinition]) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Add) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignTemporary) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputMatrix) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputScalar) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputStruct) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.BooleanLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Branch) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.CallExternalFunction) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.CallStdFunction) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Cast) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Comment) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Compare) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ConstructCustomType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ConstructMatrix) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Declaration) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Divide) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.FloatLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetArgument) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetField) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetMatrixElement) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.IntegerLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Multiply) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Negate) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.OptionalOutputBranch) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Parenthetical) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.SpecialConstant) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ReturnObject) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Ternary) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.VariableRef) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.FunctionSignature) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.ScalarType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.MatrixType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.CustomType) -> str: ...

class ExpressionUsage:
    __members__: ClassVar[dict] = ...  # read-only
    OptionalOutputArgument: ClassVar[ExpressionUsage] = ...
    OutputArgument: ClassVar[ExpressionUsage] = ...
    ReturnValue: ClassVar[ExpressionUsage] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class FunctionDescription:
    def __init__(self, name: str) -> None: ...
    @overload
    def add_input_argument(self, name: str, type: pywrenfold.type_info.ScalarType) -> pywrenfold.sym.Expr | pywrenfold.sym.MatrixExpr | pywrenfold.sym.CompoundExpr: ...
    @overload
    def add_input_argument(self, name: str, type: pywrenfold.type_info.MatrixType) -> pywrenfold.sym.Expr | pywrenfold.sym.MatrixExpr | pywrenfold.sym.CompoundExpr: ...
    @overload
    def add_input_argument(self, name: str, type: pywrenfold.type_info.CustomType) -> pywrenfold.sym.Expr | pywrenfold.sym.MatrixExpr | pywrenfold.sym.CompoundExpr: ...
    @overload
    def add_output_argument(self, name: str, is_optional: bool, value: pywrenfold.sym.Expr) -> None: ...
    @overload
    def add_output_argument(self, name: str, is_optional: bool, value: pywrenfold.sym.MatrixExpr) -> None: ...
    @overload
    def add_output_argument(self, name: str, is_optional: bool, custom_type: pywrenfold.type_info.CustomType, expressions: list[pywrenfold.sym.Expr]) -> None: ...
    def output_expressions(self) -> dict[OutputKey, pywrenfold.sym.Expr | pywrenfold.sym.MatrixExpr | pywrenfold.sym.CompoundExpr | pywrenfold.sym.BooleanExpr]: ...
    @overload
    def set_return_value(self, value: pywrenfold.sym.Expr) -> None: ...
    @overload
    def set_return_value(self, value: pywrenfold.sym.MatrixExpr) -> None: ...
    @overload
    def set_return_value(self, custom_type: pywrenfold.type_info.CustomType, expressions: list[pywrenfold.sym.Expr]) -> None: ...
    @property
    def arguments(self) -> list[Argument]: ...
    @property
    def name(self) -> str: ...

class OptimizationParams:
    binarize_operations: bool
    factorization_passes: int
    def __init__(self) -> None: ...

class OutputKey:
    def __init__(self, usage: ExpressionUsage, name: str) -> None: ...
    def is_identical_to(self, other: OutputKey) -> bool: ...
    def __eq__(self, other: OutputKey) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def usage(self) -> ExpressionUsage: ...

class PyExternalFunction:
    @overload
    def __init__(self, name: str, arguments: list[tuple[str, object]], return_type: object) -> None: ...
    @overload
    def __init__(self, arg0: PyExternalFunction) -> None: ...
    def arg_position(self, arg: str) -> int | None: ...
    def call(self, args: list) -> pywrenfold.sym.Expr | pywrenfold.sym.MatrixExpr | pywrenfold.sym.CompoundExpr | pywrenfold.sym.BooleanExpr: ...
    def is_identical_to(self, other: PyExternalFunction) -> bool: ...
    def __eq__(self, other: PyExternalFunction) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def arguments(self) -> list[Argument]: ...
    @property
    def name(self) -> str: ...
    @property
    def num_arguments(self) -> int: ...
    @property
    def return_type(self) -> pywrenfold.type_info.ScalarType | pywrenfold.type_info.MatrixType | pywrenfold.type_info.CustomType: ...

class PythonGenerator:
    def __init__(self, target: PythonGeneratorTarget, float_width: PythonGeneratorFloatWidth = ..., indentation: int = ...) -> None: ...
    def apply_preamble(self, code: str) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Add) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignTemporary) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputMatrix) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputScalar) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputStruct) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.BooleanLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Branch) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.CallExternalFunction) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.CallStdFunction) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Cast) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Comment) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Compare) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ConstructCustomType) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ConstructMatrix) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Declaration) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Divide) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.FloatLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetArgument) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetField) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetMatrixElement) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.IntegerLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Multiply) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Negate) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.OptionalOutputBranch) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Parenthetical) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.SpecialConstant) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ReturnObject) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Ternary) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.VariableRef) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.FunctionSignature) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.ScalarType) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.MatrixType) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.CustomType) -> str: ...
    @overload
    def generate(self, definition: pywrenfold.ast.FunctionDefinition) -> str: ...
    @overload
    def generate(self, definition: list[pywrenfold.ast.FunctionDefinition]) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Add) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignTemporary) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputMatrix) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputScalar) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputStruct) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.BooleanLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Branch) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.CallExternalFunction) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.CallStdFunction) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Cast) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Comment) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Compare) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ConstructCustomType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ConstructMatrix) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Declaration) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Divide) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.FloatLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetArgument) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetField) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetMatrixElement) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.IntegerLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Multiply) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Negate) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.OptionalOutputBranch) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Parenthetical) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.SpecialConstant) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ReturnObject) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Ternary) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.VariableRef) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.FunctionSignature) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.ScalarType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.MatrixType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.CustomType) -> str: ...
    @property
    def float_width(self) -> PythonGeneratorFloatWidth: ...
    @property
    def indentation(self) -> int: ...
    @property
    def target(self) -> PythonGeneratorTarget: ...

class PythonGeneratorFloatWidth:
    __members__: ClassVar[dict] = ...  # read-only
    Float32: ClassVar[PythonGeneratorFloatWidth] = ...
    Float64: ClassVar[PythonGeneratorFloatWidth] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PythonGeneratorTarget:
    __members__: ClassVar[dict] = ...  # read-only
    JAX: ClassVar[PythonGeneratorTarget] = ...
    NumPy: ClassVar[PythonGeneratorTarget] = ...
    PyTorch: ClassVar[PythonGeneratorTarget] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RustGenerator:
    def __init__(self) -> None: ...
    @staticmethod
    def apply_preamble(code: str) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Add) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignTemporary) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputMatrix) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputScalar) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.AssignOutputStruct) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.BooleanLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Branch) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.CallExternalFunction) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.CallStdFunction) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Cast) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Comment) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Compare) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ConstructCustomType) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ConstructMatrix) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Declaration) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Divide) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.FloatLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetArgument) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetField) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.GetMatrixElement) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.IntegerLiteral) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Multiply) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Negate) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.OptionalOutputBranch) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Parenthetical) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.SpecialConstant) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.ReturnObject) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.Ternary) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.VariableRef) -> str: ...
    @overload
    def format(self, element: pywrenfold.ast.FunctionSignature) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.ScalarType) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.MatrixType) -> str: ...
    @overload
    def format(self, element: pywrenfold.type_info.CustomType) -> str: ...
    @overload
    def generate(self, definition: pywrenfold.ast.FunctionDefinition) -> str: ...
    @overload
    def generate(self, definition: list[pywrenfold.ast.FunctionDefinition]) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Add) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignTemporary) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputMatrix) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputScalar) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.AssignOutputStruct) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.BooleanLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Branch) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.CallExternalFunction) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.CallStdFunction) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Cast) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Comment) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Compare) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ConstructCustomType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ConstructMatrix) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Declaration) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Divide) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.FloatLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetArgument) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetField) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.GetMatrixElement) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.IntegerLiteral) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Multiply) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Negate) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.OptionalOutputBranch) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Parenthetical) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.SpecialConstant) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.ReturnObject) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.Ternary) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.VariableRef) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.ast.FunctionSignature) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.ScalarType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.MatrixType) -> str: ...
    @overload
    def super_format(self, element: pywrenfold.type_info.CustomType) -> str: ...

@overload
def cse_function_description(desc: FunctionDescription, params: OptimizationParams | None = ...) -> tuple[dict[OutputKey, pywrenfold.sym.Expr | pywrenfold.sym.MatrixExpr | pywrenfold.sym.CompoundExpr | pywrenfold.sym.BooleanExpr], list[tuple[pywrenfold.sym.Expr, pywrenfold.sym.Expr]]]: ...
@overload
def cse_function_description(desc) -> Any: ...
@overload
def transpile(desc: list[FunctionDescription], optimization_params: OptimizationParams | None = ..., convert_ternaries: bool = ...) -> list[pywrenfold.ast.FunctionDefinition]: ...
@overload
def transpile(desc: FunctionDescription, optimization_params: OptimizationParams | None = ..., convert_ternaries: bool = ...) -> pywrenfold.ast.FunctionDefinition: ...
