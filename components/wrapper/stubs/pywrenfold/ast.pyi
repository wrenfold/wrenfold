import pywrenfold.enumerations
import pywrenfold.gen
import pywrenfold.type_info

class Add:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def args(self) -> AstSpan: ...

class AssignOutputMatrix:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def arg(self) -> pywrenfold.gen.Argument: ...
    @property
    def value(self) -> ConstructMatrix: ...

class AssignOutputScalar:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def arg(self) -> pywrenfold.gen.Argument: ...
    @property
    def value(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...

class AssignOutputStruct:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def arg(self) -> pywrenfold.gen.Argument: ...
    @property
    def value(self) -> ConstructCustomType: ...

class AssignTemporary:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def left(self) -> str: ...
    @property
    def right(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...

class AstSpan:
    def __init__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class BooleanLiteral:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def value(self) -> bool: ...

class Branch:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def condition(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...
    @property
    def else_branch(self) -> AstSpan: ...
    @property
    def if_branch(self) -> AstSpan: ...

class CallExternalFunction:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def args(self) -> AstSpan: ...
    @property
    def function(self): ...

class CallStdFunction:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def args(self) -> AstSpan: ...
    @property
    def function(self) -> pywrenfold.enumerations.StdMathFunction: ...

class Cast:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def arg(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...
    @property
    def destination_type(self) -> pywrenfold.type_info.NumericType: ...

class Comment:
    def __init__(self, *args, **kwargs) -> None: ...
    def split_lines(self) -> list[str]: ...
    @property
    def content(self) -> str: ...

class Compare:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def left(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...
    @property
    def operation(self) -> pywrenfold.enumerations.RelationalOperation: ...
    @property
    def right(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...

class ConstructCustomType:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_field_value(self, name: str) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef | None: ...
    @property
    def type(self) -> pywrenfold.type_info.CustomType: ...

class ConstructMatrix:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def args(self) -> AstSpan: ...
    @property
    def type(self) -> pywrenfold.type_info.MatrixType: ...

class Declaration:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> pywrenfold.type_info.ScalarType | pywrenfold.type_info.MatrixType | pywrenfold.type_info.CustomType: ...
    @property
    def value(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef | None: ...

class Divide:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def left(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...
    @property
    def right(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...

class FloatLiteral:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def value(self) -> float: ...

class FunctionDefinition:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def body(self) -> AstSpan: ...
    @property
    def signature(self) -> FunctionSignature: ...

class FunctionSignature:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def arguments(self) -> list[pywrenfold.gen.Argument]: ...
    @property
    def name(self) -> str: ...
    @property
    def return_type(self) -> pywrenfold.type_info.ScalarType | pywrenfold.type_info.MatrixType | pywrenfold.type_info.CustomType | None: ...

class GetArgument:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def argument(self) -> pywrenfold.gen.Argument: ...

class GetField:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def arg(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...
    @property
    def field_name(self) -> str: ...
    @property
    def struct_type(self) -> pywrenfold.type_info.CustomType: ...

class GetMatrixElement:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def arg(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...
    @property
    def col(self) -> int: ...
    @property
    def row(self) -> int: ...

class IntegerLiteral:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def value(self) -> int: ...

class Multiply:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def args(self) -> AstSpan: ...

class Negate:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def arg(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...

class OptionalOutputBranch:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def argument(self) -> pywrenfold.gen.Argument: ...
    @property
    def statements(self) -> AstSpan: ...

class Parenthetical:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def contents(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...

class ReturnObject:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def value(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...

class SpecialConstant:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def value(self) -> pywrenfold.enumerations.SymbolicConstant: ...

class Ternary:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def condition(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...
    @property
    def left(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...
    @property
    def right(self) -> Add | AssignTemporary | AssignOutputMatrix | AssignOutputScalar | AssignOutputStruct | BooleanLiteral | Branch | CallExternalFunction | CallStdFunction | Cast | Comment | Compare | ConstructCustomType | ConstructMatrix | Declaration | Divide | FloatLiteral | GetArgument | GetField | GetMatrixElement | IntegerLiteral | Multiply | Negate | OptionalOutputBranch | Parenthetical | SpecialConstant | ReturnObject | Ternary | VariableRef: ...

class VariableRef:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def name(self) -> str: ...
